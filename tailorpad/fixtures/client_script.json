[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2021-10-01 10:05:06.490594",
  "name": "Item-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.provide(\"erpnext.stock\");\n\nfrappe.ui.form.on('Item', 'item_naming_series', function(frm, cdt, cdn){\n  var doc = frm.doc;\n  console.log(doc)\n  frm.set_value('naming_series', doc.item_naming_series)\n})\n\n\nfrappe.ui.form.on('Item', 'item_group', function(frm, cdt, cdn){\n  var doc = frm.doc;\n  frm.set_value('stock_uom', doc.item_group == 'Fabric' || doc.item_group == 'Fabric Swatch Item' ? 'Meter' : 'Nos')\n})\n\nfrappe.ui.form.on('Item', 'after_save', function(frm, cdt, cdn){\n    console.log(\"after save\")\n    if(!frm.doc.default_bom){\n        console.log(\"Called bom\")\n     return frappe.call({\n            method:\"tailorpad.custom_folder.custom_stock.bom_creation\",\n            args: {\"docid\":frm.doc.name},\n            callback: function(r){\n                console.log(\"RR\" + r.message)\n                cur_frm.reload_doc();}\n            });\n\n    }\n})\nfrappe.ui.form.on('Item', {\nvalidate: function(frm, cdt, cdn){\n  var doc = frm.doc;\n  if (frm.doc.style_fields){\n  for (var i=0;i<frm.doc.style_fields.length;i++){\n      frm.doc.style_fields[i].style_name = frm.doc.style_fields[i].style_option;\n  }\n  }\n\n//  frm.set_value('stock_uom', doc.item_group == 'Fabric' || doc.item_group == 'Fabric Swatch Item' ? 'Meter' : 'Nos')\n},\ndelete_available_garment_measurement: function(frm) {\n    frappe.garment_confirmation(frm);\n\n  },\n  \n  delete_available_measurement_template: function(frm) {\n      frappe.body_confirmation(frm);\n      \n  },\n  \n  \n  delete_available_alteration_measurement: function(frm) {\n    frappe.alteration_confirmation(frm);\n  },\n  \n  delete_available_style_template: function(frm) {\n    frappe.style_confirmation(frm);\n\n  },\n})\n\ncur_frm.fields_dict.fabric_item_code.get_query = function(doc) {\n  return {filters: { item_group: \"Fabric\"}}\n}\n\ncur_frm.fields_dict.raw_material_code.get_query = function(doc) {\n  return {\n    \"filters\": [\n      ['Item', 'item_group', 'not in', 'Bespoke, Products, Services'],\n    ]\n  }\n}\n\nfrappe.ui.form.on('Item', {\n  fabric_item_code: function(frm) {\n      if (frm.doc.fabric_item_code) {\n        var allowed_fabric_items = frm.doc.allowed_fabric_items \n          ? frm.doc.allowed_fabric_items + '\\n' + frm.doc.fabric_item_code : frm.doc.fabric_item_code;\n\n        frm.set_value('allowed_fabric_items', allowed_fabric_items);\n        frm.set_value('fabric_item_code', '');\n      }\n  },\n\n  raw_material_code: function(frm) {\n    if (frm.doc.raw_material_code) {\n        var allowed_raw_materials = frm.doc.allowed_raw_materials \n          ? frm.doc.allowed_raw_materials + '\\n' + frm.doc.raw_material_code : frm.doc.raw_material_code;\n\n        frm.set_value('allowed_raw_materials', allowed_raw_materials);\n        frm.set_value('raw_material_code', '');\n      }\n  }\n})\n\n\nfrappe.ui.form.on('Item', 'make_work_order', function(frm, cdt, cdn){\n  if(frm.doc.work_orders) {\n    frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.make_work_order\",\n      args: {\n        work_orders: frm.doc.work_orders\n      },\n      freeze: true,\n      callback: function(r){\n        refresh_field(\"work_orders\")\n      }\n    })\n  }\n})\n\n\nfrappe.ui.form.on('Item', 'refresh', function(frm, cdt, cdn){\n  var doc = frm.doc;\n  hide_field('naming_series');\n    cur_frm.fields_dict['body_measurement'].grid.wrapper.find('.grid-add-row').hide();\n\tcur_frm.fields_dict['measurement_fields'].grid.wrapper.find('.grid-add-row').hide();\n\tcur_frm.fields_dict['alteration_fields'].grid.wrapper.find('.grid-add-row').hide();\n\tcur_frm.fields_dict['style_fields'].grid.wrapper.find('.grid-add-row').hide();\n\n  if(frappe.defaults.get_default(\"country\") != 'India') {\n    frm.toggle_display('hsn_sac', 0)\n  } else {\n    frm.toggle_display('hsn_sac', 1)\n  }\n\n  \n  if(!doc.__islocal){\n    hide_field('item_naming_series');\n  }\n  \n})\n\ncur_frm.cscript.make_clubbed_product = function(){\n  frappe.model.open_mapped_doc({\n    method: \"tailorpad.admin.custom_methods.make_clubbed_product\",\n    frm: cur_frm\n  });\n}\ncur_frm.fields_dict['style_fields'].grid.get_field('style_option').get_query = function(frm, cdt, cdn) {\n\tvar child = locals[cdt][cdn];\n\treturn{\n\t // query: \"tailorpad.admin.doctype.work_order.work_order.get_style_name\",\n\t  filters:{ 'style_field': child.style_field}\n\t}\n\t\t\n  }\n  \n\ncur_frm.cscript.measurement_template = function(doc, cdt, cdn){\n  if(doc.measurement_template) {\n    frappe.call({\n    method: \"tailorpad.custom_folder.custom_stock.fetch_measurement\",\n    args: {'measurement_template': doc.measurement_template},\n    freeze: true,\n    callback: function(r){\n        if(r.message){\n          cur_frm.clear_table(\"measurement_fields\");\n          $.each(r.message, function(k,v){\n            var mfs = cur_frm.add_child(\"measurement_fields\");\n            mfs.measurement_field = v.measurement_field\n            mfs.note = v.note\n            mfs.image = v.image\n            mfs.image_html = v.image_html\n          })\n          refresh_field('measurement_fields')\n        }\n    }\n  });\n  }\n}\n\n\ncur_frm.cscript.body_measurement_template = function(doc, cdt, cdn){\n  if(doc.body_measurement_template) {\n    frappe.call({\n    method: \"tailorpad.custom_folder.custom_stock.fetch_body_measurement\",\n    args: {'measurement_template': doc.body_measurement_template},\n    freeze: true,\n    callback: function(r){\n        if(r.message){\n          cur_frm.clear_table(\"body_measurement\");\n          $.each(r.message, function(k,v){\n            var mfs = cur_frm.add_child(\"body_measurement\");\n            mfs.measurement_field = v.measurement_field\n            mfs.note = v.note\n            mfs.image = v.image\n            mfs.image_html = v.image_html\n            console.log(mfs.measurement_field);\n          })\n          refresh_field('body_measurement')\n        }\n    }\n  });  \n  }\n  \n}\n\ncur_frm.cscript.alteration_template = function(doc, cdt, cdn){\n  if(doc.alteration_template) {\n    frappe.call({\n    method: \"tailorpad.custom_folder.custom_stock.fetch_measurement\",\n    args: {'measurement_template': doc.alteration_template},\n    freeze: true,\n    callback: function(r){\n        if(r.message){\n          cur_frm.clear_table(\"alteration_fields\");\n          $.each(r.message, function(k,v){\n            var mfs = cur_frm.add_child(\"alteration_fields\");\n            mfs.measurement_field = v.measurement_field\n            mfs.note = v.note\n            mfs.image = v.image\n            mfs.image_html = v.image_html\n          })\n          refresh_field('alteration_fields')\n        }\n    }\n  });\n  }\n}\n\n\n\n\ncur_frm.cscript.style_template = function(doc, cdt, cdn){\n  if(doc.style_template){\n    frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_style\",\n      args: {'style_template': doc.style_template},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n            cur_frm.clear_table(\"style_fields\");\n            $.each(r.message, function(k,v){\n              if (v.default == \"1\"){\n              var mfs = cur_frm.add_child(\"style_fields\");\n              mfs.default = v.default\n              mfs.style_field = v.style_field\n              mfs.style_name = v.style_name\n              mfs.style_option = v.style_option\n              mfs.note = v.note\n              mfs.image = v.image\n              mfs.image_view = v.image_view\n              mfs.html_image = v.html_image\n              }\n            })\n            refresh_field('style_fields')\n          }\n      }\n    });\n  }\n}\n\n\ncur_frm.cscript.image =  function(doc, cdt, cdn){\n  var d =locals[cdt][cdn]\n  var image_view = repl('<img width=\"100\" src=\"%(image)s\">', {image: d.image});\n  frappe.model.set_value('Style fields', d.name, 'html_image', image_view)\n}\n\ncur_frm.fields_dict.product_bundle_item.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn){\n  return {\n    filters: {\n\t\t\t\"is_stock_item\": 1\n\t\t}\n  }\n}\n\ncur_frm.fields_dict.items.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn){\n  return {\n    filters: {\n\t\t\t\"item_group\": 'Raw Material'\n\t\t}\n  }\n}\n\ncur_frm.fields_dict.body_measurement_template.get_query = function(doc, cdt, cdn) {\n return {\n    filters: {\n      \"measurement_template\": 'Body Measurement'\n    }\n  } \n}\n\ncur_frm.fields_dict.measurement_template.get_query = function(doc, cdt, cdn) {\n return {\n    filters: {\n      \"measurement_template\": 'Garment Measurement'\n    }\n  } \n}\n\ncur_frm.fields_dict.alteration_template.get_query = function(doc, cdt, cdn) {\n return {\n    filters: {\n      \"measurement_template\": 'Alteration Measurement'\n    }\n  } \n}\n\nfrappe.ui.form.on('BOM Item', {\n  item_code: function(frm, cdt, cdn) {\n    get_bom_material_detail(frm.doc, cdt, cdn);\n  }\n})\nfrappe.ui.form.on('Style fields', {\n  style_field: function(frm, cdt, cdn) {\n      console.log(\"called\")\n    if(frm.doc.style_template){\n        console.log(\"inside\")\n    var child = locals[cdt][cdn];\n    frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_style\",\n      args: {'style_template': frm.doc.style_template},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n              console.log(r.message);\n            cur_frm.clear_table(\"style_fields\");\n            $.each(r.message, function(k,v){\n              if (v.default == \"1\"){\n                  console.log(v.style_name)\n              child.style_name = v.style_name\n              child.style_option = v.style_option\n              }\n            })\n           // refresh_field('style_fields')\n          }\n      }\n    })\n      }\n  }\n})\n\nfrappe.ui.form.on('BOM Operation', {\n  setup: function(frm) {\n    frm.add_fetch('operation', 'description', 'description')\n  },\n\n  operation: function(frm, cdt, cdn) {\n      console.log(\"oper\")\n    var d = locals[cdt][cdn];\n    if(!d.description) {\n      frappe.model.set_value(cdt, cdn, 'description', frm.doc.operation)\n    }\n  },\n\n  assign_trials: function(frm,cdt,cdn) {\n    new erpnext.stock.AssignTrials(frm, cdt, cdn)\n  },\n\n  employee: function(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n    if(!child.employees) {\n      frappe.model.set_value(cdt, cdn, 'employees', child.employee)\n    } else {\n      child.employees += '\\n' + child.employee\n      frappe.model.set_value(cdt, cdn, 'employees', child.employees)\n    }\n    refresh_field('operations')\n  }\n})\n\n\nvar get_bom_material_detail= function(doc, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  args = {\n    'item_code': d.item_code,\n    'qty': d.qty\n  }\n\n  if (d.item_code) {\n    return frappe.call({\n        method: \"tailorpad.custom_folder.custom_item_details.get_bom_material_detail\",\n        args: {\n          'item_code': d.item_code,\n          'qty': d.qty\n        },\n        callback: function(r) {\n          d = locals[cdt][cdn];\n          $.extend(d, r.message);\n          refresh_field(\"items\");\n        },\n        freeze: true\n    });\n  }\n}\n\n\nfrappe.ui.form.on('Style fields', {\n  define_cost_to_tailor: function(frm, cdt, cdn) {\n    new erpnext.stock.CosttoTailor(frm, cdt, cdn)\n  }\n})\n\nfrappe.ui.form.on('Measurement Fields', 'image', function(frm, cdt, cdn){\n  var d = locals[cdt][cdn]\n  var image_view = repl('<img width=\"100\" src=\"%(image)s\">', {image: d.image});\n  frappe.model.set_value('Measurement Fields', d.name, 'image_html', image_view)\n  refresh_field('image_view', d.name, 'measurement_fields')\n})\n\n\n\nerpnext.stock.AssignTrials = Class.extend({\n  init: function(frm, cdt, cdn) {\n    var d = locals[cdt][cdn]\n    if (parseInt(d.trials)==1){\n      this.frm = frm\n      this.init_trials(d) // create dialog\n      this.render_data(d) // to show data in the dialog\n      this.add_trial(d) // add new rows\n      this.save_data(d) // save data\n      this.remove_row(d) // remove row\n      this.auto_checked_actual_fabric()\n      refresh_field('branch_dict')\n    }\n    else{\n      alert(\"Click on Check box Trials\")\n    }\n  },\n  init_trials : function(data){\n        this.dialog = new frappe.ui.Dialog({\n            title:__('Trial'),\n            fields: [\n                {fieldtype:'Button', fieldname:'add_warehouse', label:__('Add Trial'), reqd:false,\n                    description: __(\"\")},\n                {fieldtype:'HTML', fieldname:'styles_name', label:__('Styles'), reqd:false,\n                    description: __(\"\")}\n            ]\n        })\n        $('.modal-content').css('width', '800px')\n        $('[data-fieldname = \"create_new\"]').css('margin-left','100px')\n        this.control_trials = this.dialog.fields_dict;\n        this.div = $('<div id=\"myGrid\" style=\"width:100%;height:200px;margin:10px;overflow-y:scroll;\"><table class=\"table table-bordered\" style=\"background-color: #f9f9f9;height:10px\" id=\"mytable\">\\\n                    <thead><tr ><td>Operation</td><td>Trial No</td><td>Quality Check</td><td>Actual Fabric</td>\\\n                    <td>Amendment</td><td>Trial Cost</td><td>Remove</td></tr></thead><tbody></tbody></table></div>').appendTo($(this.control_trials.styles_name.wrapper))\n\n        this.dialog.show();\n    },\n    render_data: function(data){\n        var me =this;\n        var $trial_data;\n        if (data.branch_dict){\n            $trial_data = JSON.parse(data.branch_dict)\n            for(j in $trial_data)\n            {\n                if($trial_data[j]['trial']){\n                    me.table = $(me.div).find('#mytable tbody').append('<tr><td>'+$trial_data[j]['operation']+'</td>\\\n                        <td>'+$trial_data[j]['trial']+'</td>\\\n                        <td><input id=\"quality_check\" class=\"quality_check\" type=\"checkbox\" name=\"quality_check\" '+$trial_data[j]['quality_check']+'></td>\\\n                        <td><input id=\"actual_fabric\" class=\"quality_check\" type=\"checkbox\" name=\"actual_fabric\" '+$trial_data[j]['actual_fabric']+'></td>\\\n                        <td><input id=\"amended\" class=\"quality_check\" type=\"checkbox\"  name=\"amended\" '+$trial_data[j]['amended']+'></td>\\\n                        <td><input type=\"Textbox\" class=\"text_box\" value=\"'+$trial_data[j]['cost']+'\"></td>\\\n                        <td>&nbsp;<button  class=\"remove\">X</button></td></tr>') \n                }\n            }\n        }\n    },\n    add_trial: function(data){\n        var me = this;\n        this.table;\n        if(!data.last_trial_no) {\n          data.last_trial_no = 0;\n        }\n\n        $(this.control_trials.add_warehouse.input).click(function(){\n            var ch = ''\n            data.last_trial_no += 1\n            if($(me.div).find('#mytable tbody tr:last td:eq(3) .quality_check').is(':checked') ==true){\n                ch = 'checked'\n            }\n            this.table = $(me.div).find('#mytable tbody').append('<tr><td>'+data.operation+'</td><td>'+data.last_trial_no+'</td>\\\n                <td><input class=\"quality_check\" type=\"checkbox\" name=\"quality_check\"></td>\\\n                <td><input id=\"actual_fabric\" class=\"quality_check\" type=\"checkbox\" name=\"actual_fabric\" '+ch+'></td>\\\n                <td><input class=\"quality_check\" type=\"checkbox\" name=\"amended\" ></td><td><input class=\"text_box\" data-fieldtype=\"Int\" type=\"Textbox\">\\\n                </td><td>&nbsp;<button  class=\"remove\">X</button></td></tr>')\n            $('[data-fieldname=\"trial\"]').val('')\n            me.auto_checked_actual_fabric()\n            me.remove_row(data)\n        })\n    },\n    save_data : function(data){\n        var me = this;\n\n        this.dialog.set_primary_action(__(\"Save\"), function() {\n            var status='true';\n            var trials_dict={};\n            $(me.div).find(\"#mytable tbody tr\").each(function(i) {\n                var key =['operation','trial', 'quality_check','actual_fabric','amended','cost','cancel']\n                var $data= {};\n                trial_no = i;\n                cells = $(this).find('td')\n                $(cells).each(function(i) {\n                    if(i==1 && parseInt($(this).text())!=(trial_no + 1)){\n                        data.branch_dict =\"\";\n                        status ='false';\n                        return status\n                    }\n                    var d1 = $(this).find('.quality_check').is(':checked') ? 'checked' : $(this).find('.text_box').val() || $(this).text();\n                    $data[key[i]]=d1\n                    if(i==1) {                    \n                      data.last_trial_no = $(this).text();\n                    }\n                })\n                trials_dict[i]=($data)\n            })\n\n            if(status=='true' && trials_dict){\n                if (!Object.keys(trials_dict).length) {\n                  data.last_trial_no = 0;\n                }\n                data.trials_qc = me.find_trials_hasQC(trials_dict, 'quality_check')\n                data.actual_fabric = me.find_trials_hasQC(trials_dict, 'actual_fabric')\n                data.branch_dict = JSON.stringify(trials_dict)\n                refresh_field('operations')\n                me.dialog.hide()\n                me.frm.save()\n            }else{\n                alert(\"Trials must be in sequence\")\n            }\n        })\n    },\n    find_trials_hasQC: function(trials_dict, type){\n        msg = 0\n        $.each(trials_dict, function(i){\n            if(trials_dict[i][type] == 'checked'){\n                msg = 1\n            }\n        })\n        return msg\n    },\n\n    remove_row : function(d){\n        var me =this;\n        $(this.div).find('.remove').click(function(){\n            id = $(this).closest('tr').find('td:eq(1)').text();\n            $(this).parent().parent().remove()\n            d.last_trial_no = cint(id) - 1;\n        })\n    },\n    add_branch : function(doc, cdt, cdn){\n        var d =locals[cdt][cdn]\n        status = this.check_duplicate(d)\n        if (status=='true' && d.warehouse){\n            if(d.branch_list){\n                d.branch_list += '\\n'+d.warehouse   \n            }\n            else{\n                d.branch_list=d.warehouse\n            }\n        }\n        else{\n            alert(\"process already available or process not selected\")\n        }\n        refresh_field('operations')\n    },\n    check_duplicate: function(data){\n        if(data.branch_list){\n            branches = (data.branch_list).split('\\n')\n            for(i=0;i<branches.length;i++){\n                  if(data.warehouse == branches[i]){\n                      return 'false'      \n                  }\n            }\n        }\n        return 'true'\n    },\n    price_list: function(doc, cdt, cdn){\n        var s;\n        // new frappe.CustomerRate(doc, cdt, cdn)\n    },\n    is_clubbed_product : function(doc){\n        doc.has_serial_no = 0\n        refresh_field('has_serial_no')\n    },\n    auto_checked_actual_fabric: function(){\n        var me = this\n        $(me.div).find('[name=\"actual_fabric\"]').click(function(){\n            var s= $(this).parent().parent().index();\n            var count = $('#mytable').children('tbody').children('tr').length;\n            for(i=s+1 ; i<count;i++)\n            {\n                $(me.div).find('#mytable tbody tr:eq('+i+') td:eq(3) .quality_check').prop('checked','checked')\n            }\n        })\n    }\n})\n\n\nerpnext.stock.CosttoTailor = Class.extend({\n  init:function(frm, cdt, cdn){\n        this.frm = frm;\n        this.d = locals[cdt][cdn]\n        this.init_cost_to_tailor()\n        this.render_cost_to_tailor_form()\n        this.add_cost_to_tailor()\n        this.save_tailor_cost()\n\n  },\n  init_cost_to_tailor:function(){\n     this.dialog = new frappe.ui.Dialog({\n        title:__('Cost To Tailor'),\n        fields: [\n            {fieldtype:'Link', fieldname:'process',options:'Operation', label:__('Operation'), reqd:false,\n                description: __(\"\")},\n            {fieldtype:'Button', fieldname:'add_tailor_cost', label:__('Add'), reqd:false,\n                description: __(\"\")},\n            {fieldtype:'HTML', fieldname:'tailor_cost_name', label:__('Styles'), reqd:false,\n                description: __(\"\")}\n        ]\n    })\n    $('.modal-content').css('width', '800px')\n    $('[data-fieldname = \"create_new\"]').css('margin-left','100px')\n    this.control_tailor_cost = this.dialog.fields_dict;\n    this.div = $('<div id=\"myGrid\" style=\"width:100%;height:200px;margin:10px;overflow-y:scroll;\"><table class=\"table table-bordered\" style=\"background-color: #f9f9f9;height:10px\" id=\"mytable\">\\\n                <thead><tr ><td>Process</td><td>Tailor Cost</td><td>Remove</td></tr></thead><tbody></tbody></table></div>').appendTo($(this.control_tailor_cost.tailor_cost_name.wrapper))\n\n    \n    this.dialog.show();\n\n\n  },\n  render_cost_to_tailor_form:function(){\n    var me = this\n    if(me.d.process_wise_tailor_cost){\n        tailor_dict = JSON.parse(me.d.process_wise_tailor_cost)\n        $.each(tailor_dict,function(key,value){\n            $(me.div).find('#mytable tbody').append('<tr id=\"my_row\"><td>'+key+'</td>\\\n            <td id=\"cost\"><input class=\"text_box\" data-fieldtype=\"Int\" type=\"Textbox\" value='+value+'>\\\n            </td><td>&nbsp;<button  class=\"remove\">X</button></td></tr>')\n             me.remove_row()\n        })\n    }\n  },\n  add_cost_to_tailor:function(){\n\n    var me = this;\n    this.table;\n    $(this.control_tailor_cost.add_tailor_cost.input).click(function(){\n        this.table = $(me.div).find('#mytable tbody').append('<tr id=\"my_row\"><td>'+me.control_tailor_cost.process.input.value+'</td>\\\n            <td><input class=\"text_box\" data-fieldtype=\"Int\" type=\"Textbox\">\\\n            </td><td>&nbsp;<button  class=\"remove\">X</button></td></tr>')\n        me.remove_row()\n    })\n\n  },\n  save_tailor_cost:function(){\n    var me = this\n    this.dialog.set_primary_action(__(\"Save\"), function() {\n      this.tailor_cost_dict = {}\n      var inner_me = this\n      $(me.div).find('#mytable tr#my_row').each(function(i,value){\n        var $td = $(this).find('td')\n          var process_name = ''\n        $($td).each(function(inner_index){\n          \n            if(inner_index == 0){\n                process_name = $(this).text()\n                inner_me.tailor_cost_dict[$(this).text()]=[]\n            }\n            if(inner_index == 1){\n                inner_me.tailor_cost_dict[process_name]=$(this).find('input').val()\n            }\n           \n        })\n      })\n      me.d.process_wise_tailor_cost = JSON.stringify(this.tailor_cost_dict)\n      refresh_field(['style_fields',me.d.name,'process_wise_tailor_cost'])\n      me.dialog.hide()\n      me.frm.save()\n    })\n  },\n  remove_row : function(){\n        var me =this;\n        $(this.div).find('.remove').click(function(){\n            $(this).parent().parent().remove()\n        })\n    },\n})\n\nfrappe.body_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available body measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.body_measurement_template) {\n      \n        frm.set_value('body_measurement_template', '');\n        frm.set_value('body_measurement', '');\n        frm.save()\n\t\t}\n    d.hide();\n\t\t},\n\t//\tsecondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\n\nfrappe.garment_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available garment measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.measurement_template) {\n      \n        frm.set_value('measurement_template', '');\n        frm.set_value('measurement_fields', []);\n        frm.save();\n       // frm.reload_doc();\n      \n    }\n    d.hide();\n\t\t},\n\t\t//secondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\n\nfrappe.alteration_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available alteration measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.alteration_template) {\n      \n        frm.set_value('alteration_template', '');\n        frm.set_value('alteration_fields', '');\n        frm.save();\n      //  frm.reload_doc();\n     }\n    d.hide();\n\t\t},\n\t\t//secondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\nfrappe.style_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available style measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.style_template) {\n      \n        frm.set_value('style_template', '');\n        frm.set_value('style_fields', []);\n        frm.save();\n        //frm.reload_doc();\n      }\n    d.hide();\n\t\t},\n\t\t//secondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2022-02-20 19:03:50.633124",
  "name": "Customer-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Customer', 'refresh', function(frm){\n  frm.set_df_property('measurement_field', 'read_only', 1, frm.doc.name, 'measurement_fields', 'Measurement Fields');\n  frm.set_df_property('image', 'read_only', 1, frm.doc.name, 'measurement_fields', 'Measurement Fields');\n  // frm.set_value('measurement_template', '')\n  // frm.set_value('new_measurement_template', '')\n  // frm.set_value('measurement_fields', '')\n  // frm.set_value('style_template', '')\n  // frm.set_value('styles', '')\n  frm.set_df_property('update_value_in_customer_template', 'in_list_view', 0, frm.doc.name, 'measurement_fields', 'Measurement Fields')\n\n})\nfrappe.ui.form.on('Customer', 'validate', function(frm){\n    for (var i = 0;i<cur_frm.doc.measurement_fields.length;i++){\n        var m = cur_frm.add_child(\"customer_measurement_data\");\n              m.measurement_template = cur_frm.doc.new_measurement_template\n              m.measurement_field = cur_frm.doc.measurement_fields[i].measurement_field\n              m.measurement_value = cur_frm.doc.measurement_fields[i].measurement_value\n              m.note = cur_frm.doc.measurement_fields[i].note\n              m.image = cur_frm.doc.measurement_fields[i].image\n              m.image_html = cur_frm.doc.measurement_fields[i].image_html\n    }\n    for (var j = 0;j<cur_frm.doc.garment_measurement_fields.length;j++){\n         var m = cur_frm.add_child(\"garment_measurement_data\");\n              m.measurement_template = cur_frm.doc.new_garment_measurement_template\n              m.measurement_field = cur_frm.doc.garment_measurement_fields[j].measurement_field\n              m.measurement_value = cur_frm.doc.garment_measurement_fields[j].measurement_value\n              m.note = cur_frm.doc.garment_measurement_fields[j].note\n              m.image = cur_frm.doc.garment_measurement_fields[j].image\n              m.image_html = cur_frm.doc.garment_measurement_fields[j].image_html\n    }\n    for (var j = 0;j<cur_frm.doc.alteration_measurement_fields.length;j++){\n         var m = cur_frm.add_child(\"alteration_measurement_data\");\n              m.measurement_template = cur_frm.doc.new_alteration_measurement_template\n              m.measurement_field = cur_frm.doc.alteration_measurement_fields[j].measurement_field\n              m.measurement_value = cur_frm.doc.alteration_measurement_fields[j].measurement_value\n              m.note = cur_frm.doc.alteration_measurement_fields[j].note\n              m.image = cur_frm.doc.alteration_measurement_fields[j].image\n              m.image_html = cur_frm.doc.alteration_measurement_fields[j].image_html\n    }\n    for (var k = 0;k<cur_frm.doc.styles.length;k++){\n         var m = cur_frm.add_child(\"customer_style_data\");\n              m.style_template = cur_frm.doc.new_style_template\n              m.style_field = cur_frm.doc.styles[k].style_field\n              m.style_name = cur_frm.doc.styles[k].style_value || cur_frm.doc.styles[k].style_name\n              m.note = cur_frm.doc.styles[k].note\n              m.image = cur_frm.doc.styles[k].image\n              m.image_html = cur_frm.doc.styles[k].image_html || cur_frm.doc.styles[k].html_image\n    }\n    if(frm.doc.new_measurement_template){\n       cur_frm.set_value('measurement_template', frm.doc.new_measurement_template)\n       cur_frm.doc.new_measurement_template = '';\n       // cur_frm.clear_table(\"measurement_fields\");\n    }\n    if(frm.doc.new_garment_measurement_template){\n       cur_frm.set_value('garment_template', frm.doc.new_garment_measurement_template)\n       cur_frm.doc.new_garment_measurement_template = '';\n        //cur_frm.clear_table(\"garment_measurement_fields\");\n    }\n    if(frm.doc.new_alteration_measurement_template){\n        cur_frm.set_value('alteration_template', frm.doc.new_alteration_measurement_template)\n        cur_frm.doc.new_alteration_measurement_template = '';\n       // cur_frm.clear_table(\"alteration_measurement_fields\");\n    }\n    if(frm.doc.new_style_template){\n       // cur_frm.doc.new_style_template = '';\n       // cur_frm.clear_table(\"styles\");\n    }\n})\nfrappe.ui.form.on('Customer', 'measurement_template', function(frm){\n  var doc = frm.doc;\n  console.log(\"Called\" + doc.measurement_template)\n  if(doc.measurement_template && doc.name) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_customer_measurement\",\n      args: {'measurement_template': doc.measurement_template, 'parent': doc.name},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n              console.log(r.message[0])\n            cur_frm.set_value('new_measurement_template', '')\n            cur_frm.set_value('type_of_measurement', r.message[1])\n            cur_frm.clear_table(\"measurement_fields\");\n            $.each(r.message[0], function(k,v){\n              var mfs = cur_frm.add_child(\"measurement_fields\");\n              mfs.measurement_field = v.measurement_field\n              mfs.measurement_value = v.measurement_value\n              mfs.note = v.note\n              mfs.image = v.image\n              mfs.image_html = v.image_html\n            })\n            refresh_field('measurement_fields')\n          }\n      }\n    });  \n  }\n})\n\nfrappe.ui.form.on('Customer', 'garment_template', function(frm){\n  var doc = frm.doc;\n  if(doc.garment_template && doc.name) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_customer_measurement1\",\n      args: {'measurement_template': doc.garment_template, 'parent': doc.name},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n            cur_frm.set_value('new_garment_measurement_template', '')\n            cur_frm.set_value('type_of_measurement', r.message[1])\n            cur_frm.clear_table(\"garment_measurement_fields\");\n            $.each(r.message[0], function(k,v){\n              var mfs = cur_frm.add_child(\"garment_measurement_fields\");\n              mfs.measurement_field = v.measurement_field\n              mfs.measurement_value = v.measurement_value\n              mfs.note = v.note\n              mfs.image = v.image\n              mfs.image_html = v.image_html\n            })\n            refresh_field('garment_measurement_fields')\n          }\n      }\n    });  \n  }\n})\n\nfrappe.ui.form.on('Customer', 'alteration_template', function(frm){\n  var doc = frm.doc;\n  if(doc.alteration_template && doc.name) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_customer_measurement2\",\n      args: {'measurement_template': doc.alteration_template, 'parent': doc.name},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n            cur_frm.set_value('new_alteration_measurement_template', '')\n            cur_frm.set_value('type_of_measurement', r.message[1])\n            cur_frm.clear_table(\"alteration_measurement_fields\");\n            $.each(r.message[0], function(k,v){\n              var mfs = cur_frm.add_child(\"alteration_measurement_fields\");\n              mfs.measurement_field = v.measurement_field\n              mfs.measurement_value = v.measurement_value\n              mfs.note = v.note\n              mfs.image = v.image\n              mfs.image_html = v.image_html\n            })\n            refresh_field('alteration_measurement_fields')\n          }\n      }\n    });  \n  }\n})\n\n\nfrappe.ui.form.on('Customer', 'new_measurement_template', function(frm) {\n  var doc = frm.doc;\n  if(doc.new_measurement_template && doc.name) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_customer_measurement\",\n      args: {'measurement_template': doc.new_measurement_template, 'parent': doc.name},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n            cur_frm.set_value('measurement_template', '')\n           // cur_frm.set_value('type_of_measurement', r.message[1])\n            cur_frm.clear_table(\"measurement_fields\");\n           // cur_frm.clear_table(\"customer_measurement_data\")\n            $.each(r.message[0], function(k,v){\n              var mfs = cur_frm.add_child(\"measurement_fields\");\n              mfs.measurement_field = v.measurement_field\n              mfs.measurement_value = v.measurement_value\n              mfs.note = v.note\n              mfs.image = v.image\n              mfs.image_html = v.image_html\n             /* var m = cur_frm.add_child(\"customer_measurement_data\");\n              m.measurement_template = cur_frm.doc.new_measurement_template\n              m.measurement_field = mfs.measurement_field\n              m.measurement_value = mfs.measurement_value\n              m.note = mfs.note\n              m.image = mfs.image\n              m.image_html = mfs.image_html*/\n            })\n            refresh_field('measurement_fields')\n          }\n      }\n    });\n  }\n})\n\n\n\nfrappe.ui.form.on('Customer', 'new_garment_measurement_template', function(frm) {\n  var doc = frm.doc;\n  if(doc.new_garment_measurement_template && doc.name) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_customer_measurement\",\n      args: {'measurement_template': doc.new_garment_measurement_template, 'parent': doc.name},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n            cur_frm.set_value('garment_template', '')\n           // cur_frm.set_value('type_of_measurement', r.message[1])\n            cur_frm.clear_table(\"garment_measurement_fields\");\n            $.each(r.message[0], function(k,v){\n             var mfs = cur_frm.add_child(\"garment_measurement_fields\");\n              mfs.measurement_field = v.measurement_field\n              mfs.measurement_value = v.measurement_value\n              mfs.note = v.note\n              mfs.image = v.image\n              mfs.image_html = v.image_html\n             /* var m = cur_frm.add_child(\"garment_measurement_data\");\n              m.measurement_template = cur_frm.doc.new_garment_measurement_template\n              m.measurement_field = v.measurement_field\n              m.measurement_value = v.measurement_value\n              m.note = v.note\n              m.image = v.image\n              m.image_html = v.image_html*/\n            })\n            refresh_field('garment_measurement_fields')\n          }\n      }\n    });\n  }\n})\n\nfrappe.ui.form.on('Customer', 'new_alteration_measurement_template', function(frm) {\n  var doc = frm.doc;\n  if(doc.new_alteration_measurement_template && doc.name) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_customer_measurement\",\n      args: {'measurement_template': doc.new_alteration_measurement_template, 'parent': doc.name},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n            cur_frm.set_value('alteration_template', '')\n           // cur_frm.set_value('type_of_measurement', r.message[1])\n            cur_frm.clear_table(\"alteration_measurement_fields\");\n            $.each(r.message[0], function(k,v){\n              var mfs = cur_frm.add_child(\"alteration_measurement_fields\");\n              mfs.measurement_field = v.measurement_field\n              mfs.measurement_value = v.measurement_value\n              mfs.note = v.note\n              mfs.image = v.image\n              mfs.image_html = v.image_html\n              /*var m = cur_frm.add_child(\"alteration_measurement_data\");\n              m.measurement_template = cur_frm.doc.new_alteration_measurement_template\n              m.measurement_field = v.measurement_field\n              m.measurement_value = v.measurement_value\n              m.note = v.note\n              m.image = v.image\n              m.image_html = v.image_html*/\n            })\n            refresh_field('alteration_measurement_fields')\n          }\n      }\n    });\n  }\n})\n\nfrappe.ui.form.on('Style fields', 'image', function(frm, cdt, cdn){\n    var d = locals[cdt][cdn]\n    image_view = repl('<img width=\"100\" src=\"%(image)s\">', {image: d.image});\n    frappe.model.set_value('Style fields', d.name, 'html_image', image_view)\n    refresh_field('image_view', d.name, 'styles')\n})\n\nfrappe.ui.form.on('Customer', 'style_template', function(frm){\n  var doc = frm.doc;\n  if(doc.style_template && doc.name) {\n    frappe.call({\n      method: \"tailorpad.custom_folder.custom_stock.fetch_customer_style\",\n      args: {'style_template': doc.style_template, 'parent': doc.name},\n      freeze: true,\n      callback: function(r){\n          if(r.message){\n            cur_frm.set_value('new_style_template', '')\n            cur_frm.set_value('type_of_style', r.message[1])\n            cur_frm.clear_table(\"styles\");\n            $.each(r.message[0], function(k,v){\n              var mfs = cur_frm.add_child(\"styles\");\n              mfs.style_field = v.style_field\n              mfs.style_name = v.style_name || v.style_value\n              mfs.note = v.note\n              mfs.default = v.default\n              mfs.image = v.image\n              mfs.html_image = v.html_image || v.image_html\n            })\n            refresh_field('styles')\n          }\n      }\n    });\n  }\n})\nfrappe.ui.form.on('Customer', 'new_style_template', function(frm){\n  var doc = frm.doc;\n  if(doc.new_style_template && doc.name) {\n    frappe.call({\n    method: \"tailorpad.custom_folder.custom_stock.fetch_customer_style\",\n    args: {'style_template': doc.new_style_template, 'parent': doc.name},\n    freeze: true,\n    callback: function(r){\n        if(r.message){\n          cur_frm.set_value('style_template', '')\n          cur_frm.set_value('type_of_style', r.message[1])\n          cur_frm.clear_table(\"styles\");\n          $.each(r.message[0], function(k,v){\n            var mfs = cur_frm.add_child(\"styles\");\n            mfs.style_field = v.style_field\n            mfs.style_name = v.style_name || v.style_value\n            mfs.note = v.note\n            mfs.default = v.default\n            mfs.image = v.image\n            mfs.html_image = v.html_image || v.image_html\n            \n            var m = cur_frm.add_child(\"customer_style_data\");\n              m.style_template = cur_frm.doc.new_style_template\n              m.style_field = v.style_field\n              m.style_name = v.style_value || v.style_name\n              m.note = v.note\n              m.default = v.default\n              m.image = v.image\n              m.image_html = v.image_html || v.html_image\n          })\n          refresh_field('styles')\n        }\n    }\n  });\n  }\n  \n})\n\nfrappe.ui.form.on('WO Style Field', 'style_name', function(frm, cdt, cdn){ \n  var d = locals[cdt][cdn]\n  style_template = doc.style_template || doc.new_style_template;\n  if(d.style_name) {\n    frappe.call({\n    method: 'tailorpad.admin.doctype.work_order.work_order.get_style_name_data_for_customer',\n    args: {'style_template': style_template, 'style_field': d.style_field, 'style_name': d.style_name},\n    freeze: true,\n    callback: function(r){\n      if(r.message){\n        $.each(['note', 'image', 'html_image', 'cost_to_customer'], function(i,d){\n            frappe.model.set_value(cdt, cdn, d, r.message[d])\n        })\n      }\n    }\n  })\n  }\n})\n\nfrappe.ui.form.on('Customer', {\n  setup: function(frm, cdt, cdn) {\n    frm.fields_dict['measurement_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.old_measurement_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n    frm.fields_dict['new_measurement_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.new_measurement_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n     frm.fields_dict['garment_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.old_garment_measurement_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n    frm.fields_dict['new_garment_measurement_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.new_garment_measurement_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n    frm.fields_dict['alteration_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.old_alteration_measurement_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n    frm.fields_dict['new_alteration_measurement_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.new_alteration_measurement_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n    \n    frm.fields_dict['style_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.old_style_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n\n    frm.fields_dict['new_style_template'].get_query = function() {\n        return {\n          query: \"tailorpad.custom_folder.custom_selling.new_style_data\",\n          filters: {\n            'customer': frm.doc.name\n          }\n      }\n    }\n\n    frm.fields_dict['styles'].grid.get_field('style_name').get_query = function(frm, cdt, cdn) {\n      var child = locals[cdt][cdn];\n      return{\n       // query: \"tailorpad.admin.doctype.work_order.work_order.get_style_name\",\n        filters:{ 'style_field': child.style_field}\n      }\n    }\n\n  }\n})\n\nfrappe.ui.form.on('Customer', 'update_measurement', function(frm){\n  var doc = frm.doc;\n\n  if(!doc.measurement_template && !doc.new_measurement_template){\n    frappe.throw('Select Measurement Template')\n  }\n\n  measurement_template_t = doc.measurement_template || doc.new_measurement_template;\n\n  if(doc.type_of_measurement == 'New'){\n    $.each(doc.measurement_fields, function(k,v){\n      var mfs = cur_frm.add_child(\"customer_measurement_data\");\n      mfs.measurement_template = measurement_template_t;\n      mfs.measurement_field = v.measurement_field\n      mfs.note = v.note\n      mfs.measurement_value = v.measurement_value\n      mfs.image = v.image\n      mfs.image_html = v.image_html\n    })\n    refresh_field('measurement_fields')\n  }else if(doc.type_of_measurement == 'Update'){\n    measurement_set = {}\n    $.each(doc.measurement_fields, function(k, v){\n      measurement_set[v.measurement_field] = [v.measurement_value, v.image_html, v.note]\n    })\n    frm.cscript.update_customer_measurement(measurement_set)\n  }\n\n  frm.save();\n  frappe.msgprint(\"Updated Successfully\")\n})\n\nfrappe.ui.form.on('Customer', 'update_style', function(frm){\n  var doc = frm.doc;\n  var style_template = doc.style_template || doc.new_style_template;\n\n  if(!style_template){\n    frappe.throw('Select Style Template')\n  }\n\n  if(doc.type_of_style == 'New'){\n    $.each(doc.styles, function(k,v){\n      var mfs = cur_frm.add_child(\"customer_style_data\");\n      mfs.style_template = style_template\n      mfs.style_field = v.style_field\n      mfs.note = v.note\n      mfs.style_value = v.style_name\n      mfs.image = v.image\n      mfs.image_html = v.html_image\n    })\n    refresh_field('customer_style_data')\n  }else if(doc.type_of_style == 'Update'){\n    measurement_set = {}\n    $.each(doc.styles, function(k, v){\n      measurement_set[v.style_field] = [v.style_name, v.html_image, v.note, v.style_field, v.image]\n    })\n    frm.cscript.update_customer_style(measurement_set)\n  }\n\n  frm.save();\n  frappe.msgprint(\"Updated Successfully\")\n})\n\n\ncur_frm.cscript.update_customer_measurement=function(measurement_set){\n  var doc = cur_frm.doc;\n  measurement_template_t = doc.measurement_template || doc.new_measurement_template;\n  $.each(doc.customer_measurement_data, function(i, data){\n    if(data.measurement_template == measurement_template_t && measurement_set[data.measurement_field][0] > 0){\n      data.measurement_value = measurement_set[data.measurement_field][0]\n      data.note = measurement_set[data.measurement_field][2]\n      delete measurement_set[data.measurement_field]\n    }\n  })\n\n  if(measurement_set){\n    $.each(measurement_set, function(field, value){\n      var mfs = cur_frm.add_child(\"customer_measurement_data\");\n      mfs.measurement_template = measurement_template_t\n      mfs.measurement_field = field\n      mfs.measurement_value = value[0]\n      mfs.html_image = value[0]\n    })\n  }\n}\n\ncur_frm.cscript.update_customer_style=function(measurement_set){\n  var doc = cur_frm.doc;\n  style_template = doc.style_template || doc.new_style_template;\n  $.each(doc.customer_style_data, function(i, data){\n    if(data.style_template == style_template && measurement_set[data.style_field]){\n      data.style_value = measurement_set[data.style_field][0]\n      data.image_html = measurement_set[data.style_field][1]\n      data.image = measurement_set[data.style_field][4]\n      data.note = measurement_set[data.style_field][2]\n      delete measurement_set[data.style_field]\n    } else if(data.style_template == style_template) {\n      delete measurement_set[data.style_field]\n    }\n  })\n\n  if(measurement_set){\n    $.each(measurement_set, function(field, value){\n      mfs = cur_frm.add_child(\"customer_style_data\");\n      mfs.style_template = style_template\n      mfs.style_field = value[3]\n      mfs.style_value = value[0]\n      mfs.image_html = value[1]\n      mfs.note = value[2]\n      mfs.image = value[4]\n    })\n  }\n}\n\n\nfrappe.ui.form.on('Customer', {\n  attach_front_side: function() {\n    refresh_field(\"front_side\");\n  },\n  attach_back_side: function() {\n    refresh_field(\"back_side\");\n  },\n  delete_available_garment_measurement: function(frm) {\n    frappe.garment_confirmation(frm);\n\n  },\n  \n  delete_available_measurement_template: function(frm) {\n      frappe.body_confirmation(frm);\n      \n  },\n  \n  \n  delete_available_alteration_measurement: function(frm) {\n    frappe.alteration_confirmation(frm);\n  },\n  \n  delete_available_style_template: function(frm) {\n    frappe.style_confirmation(frm);\n\n  },\n})\n\n\ncur_frm.cscript.change_style = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.call({\n    method: 'tailorpad.admin.doctype.work_order.work_order.get_style_data',\n    args: {'args': doc, 'style_field': d.style_field},\n    freeze: true,\n    callback: function(r){\n      \n      if(r.message){\n        new ChangeStyle(r.message, doc)\n      }\n    }\n  })\n}\n\nfrappe.body_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available body measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.measurement_template) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_selling.delete_templates\",\n      args: {\n        data_type: \"Customer Measurement Data\", \n        customer: frm.doc.name, \n        template_name: frm.doc.measurement_template\n      },\n      callback: function() {\n        frm.set_value('measurement_template', '');\n        frm.set_value('new_measurement_template', '')\n        frm.set_value('measurement_fields', '');\n        frm.save()\n      }\n    })\n\t\t}\n    d.hide();\n\t\t},\n\t//\tsecondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\n\nfrappe.garment_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available garment measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.garment_template) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_selling.delete_garment_templates\",\n      args: {\n        data_type: \"Garment Measurement Data\", \n        customer: frm.doc.name, \n        template_name: frm.doc.garment_template\n      },\n      callback: function() {\n        frm.set_value('garment_template', '');\n        frm.set_value('garment_measurement_fields', []);\n        frm.set_value('new_garment_measurement_template', '');\n        frm.save();\n       // frm.reload_doc();\n      }\n    })\n    \n\t}\n    d.hide();\n\t\t},\n\t\t//secondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\n\nfrappe.alteration_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available alteration measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.alteration_template) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_selling.delete_alteration_templates\",\n      args: {\n        data_type: \"Alteration Measurement Data\", \n        customer: frm.doc.name, \n        template_name: frm.doc.alteration_template\n      },\n      callback: function() {\n        frm.set_value('alteration_template', '');\n        frm.set_value('alteration_measurement_fields', '');\n        frm.set_value('new_alteration_measurement_template', '');\n        frm.save();\n      //  frm.reload_doc();\n      }\n    })\n    \n\t}\n    d.hide();\n\t\t},\n\t\t//secondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\n\n\nfrappe.style_confirmation = function(frm, message, ifyes, ifno) {\n\tvar d = new frappe.ui.Dialog({\n\t\ttitle: __(\"Confirm\"),\n\t\tfields: [\n\t\t\t{fieldtype:\"HTML\", options:`<p class=\"frappe-confirm-message\">${'Do you want to delete available style measurement template?'}</p>`}\n\t\t],\n\t\tprimary_action_label: __(\"Yes\"),\n\t\tprimary_action: function() {\n\t\t\tif(ifyes) ifyes();\n\t\t\tif(frm.doc.style_template) {\n      frappe.call({\n      method: \"tailorpad.custom_folder.custom_selling.delete_style_templates\",\n      args: {\n        data_type: \"Customer Style Data\", \n        customer: frm.doc.name, \n        template_name: frm.doc.style_template\n      },\n      callback: function() {\n        frm.set_value('style_template', '');\n        frm.set_value('styles', []);\n        frm.set_value('new_style_template', '');\n        frm.save();\n        //frm.reload_doc();\n      }\n    })\n    \n\t}\n    d.hide();\n\t\t},\n\t\t//secondary_action_label: __(\"No\")\n\t\t\n\t});\n\td.show();\n    d.confirm_dialog = true;\n\tif(ifno){;\n\t\td.onhide = function() {\n\t\t\tif(!d.primary_action_fulfilled) {\n\t\t\t\tifno();\n\t\t\t}\n\t\t};\n\t}\n\treturn d;\n}\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2022-02-20 19:04:18.627930",
  "name": "Quotation-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "cur_frm.fields_dict['items'].grid.get_field(\"fabric_item_code\").get_query = function(doc, cdt, cdn) {\n\treturn {\n\t\tquery: \"tailorpad.custom_folder.custom_selling.get_fabric\"\n\t}\n}\n\n// cur_frm.cscript.size = function(doc, cdt, cdn){ cur_frm.cscript.get_fabric_qty(doc, cdt, cdn); }\n//\n// cur_frm.cscript.get_fabric_qty = function(doc, cdt, cdn){\n//   var d = locals[cdt][cdn]\n//   if(d.size && d.width)\n//     frappe.call({\n//         method: 'tailorpad.custom_folder.custom_selling.get_fabric_qty',\n//         args: {'parent': d.item_code, 'size': d.size, 'width': d.width},\n//         freeze: true,\n//         callback: function(r){\n//             if(r.message){\n//               frappe.model.set_value('Quotation Item', d.name, 'fabric_qty', r.message.fabric_qty)\n//             }\n//         }\n//     })\n// }\n\nfrappe.ui.form.on('Quotation Item', 'item_code', function(frm, cdt, cdn){\n    cur_frm.cscript.calculate_total_amt(frm, cdt, cdn)\n});\n/*\ncur_frm.cscript.calculate_total_amt = function(frm, cdt, cdn){\n  var doc = frm.doc;\n  var d = locals[cdt][cdn]\n  frappe.call({\n    method: \"tailorpad.custom_folder.custom_item_details.calculate_total_amt\",\n    args:{\n      args: {\n        item_code: d.item_code,\n        customer: frm.doc.customer,\n        qty: d.qty,\n        fabric_item_code: d.fabric_item_code,\n        fabric_qty: d.fabric_qty,\n        item_rate: d.price_list_rate,\n        service_rate: d.service_rate,\n        total_service_rate: d.total_service_rate,\n        fabric_rate: d.fabric_rate,\n        size: d.size,\n        width: d.width,\n        total_fabric_price: d.total_fabric_price,\n        rate: 0.0,\n        amount: 0.0,\n        parenttype: doc.doctype,\n        parent: doc.name,\n        doctype: cdt,\n        name: cdn,\n        currency: doc.currency,\n        conversion_rate: doc.conversion_rate,\n        price_list: doc.selling_price_list ||\n           doc.buying_price_list,\n        price_list_currency: doc.price_list_currency,\n        plc_conversion_rate: doc.plc_conversion_rate,\n        company: doc.company,\n        order_type: doc.order_type,\n        is_pos: cint(doc.is_pos),\n        is_subcontracted: doc.is_subcontracted,\n        transaction_date: doc.transaction_date || doc.posting_date,\n        ignore_pricing_rule: doc.ignore_pricing_rule\n      }\n    },\n    callback: function(r){\n      $.each(r.message, function(key, val){\n        if(key!= 'item_code') {\n          frappe.model.set_value(cdt, cdn, key, val)\n        }\n      })\n      cur_frm.cscript.get_item_details(frm, cdt, cdn)      \n    }\n  })\n}\n\n\ncur_frm.cscript.get_item_details = function(frm, cdt, cdn) {\n  var item = locals[cdt][cdn];\n  var update_stock = 0;\n  if(['Sales Invoice', 'Purchase Invoice'].includes(frm.doc.doctype)) {\n      update_stock = cint(me.frm.doc.update_stock);\n      show_batch_dialog = update_stock;\n\n  }\n  return this.frm.call({\n          method: \"erpnext.stock.get_item_details.get_item_details\",\n          child: item,\n          args: {\n            args: {\n              item_code: item.item_code,\n              barcode: item.barcode,\n              serial_no: item.serial_no,\n              warehouse: item.warehouse,\n              customer: frm.doc.customer,\n              supplier: frm.doc.supplier,\n              currency: frm.doc.currency,\n              update_stock: update_stock,\n              conversion_rate: frm.doc.conversion_rate,\n              price_list: frm.doc.selling_price_list || frm.doc.buying_price_list,\n              price_list_currency: frm.doc.price_list_currency,\n              plc_conversion_rate: frm.doc.plc_conversion_rate,\n              company: frm.doc.company,\n              total_fabric_price: item.total_fabric_price,\n              total_service_rate: item.total_service_rate,\n              order_type: frm.doc.order_type,\n              is_pos: cint(frm.doc.is_pos),\n              is_subcontracted: frm.doc.is_subcontracted,\n              transaction_date: frm.doc.transaction_date || frm.doc.posting_date,\n              ignore_pricing_rule: frm.doc.ignore_pricing_rule,\n              doctype: frm.doc.doctype,\n              name: frm.doc.name,\n              project: item.project || frm.doc.project,\n              qty: item.qty || 1,\n              stock_qty: item.stock_qty,\n              conversion_factor: item.conversion_factor\n            }\n          },\n\n          callback: function(r) {\n            if(!r.exc) {\n              var d = locals[cdt][cdn];\n              $.each(r.message, function(k, v) {\n                if(!d[k]) d[k] = v;\n              });\n              frm.script_manager.trigger(\"price_list_rate\", cdt, cdn);\n            }\n\n            refresh_field('items')\n          }\n        });\n}\n*/\nfrappe.ui.form.on('Sales Order Item', 'fabric_item_code', function(frm, cdt, cdn){\n  var d = locals[cdt][cdn];\n  if(d.fabric_item_code) {\n      frappe.call({\n        method : \"tailorpad.custom_folder.custom_selling.get_supplier\",\n        args : {'item_code': d.fabric_item_code},\n        freeze: true,\n        callback: function(r){\n          if(r.message){\n            frappe.model.set_value('Sales Order Item', d.name, 'fabric_supplier', r.message.default_supplier);\n            frappe.model.set_value('Sales Order Item', d.name, 'fabric_warehouse', r.message.default_warehouse);\n            d.fabric_qty = 0.0\n            if(d.size) {\n              frappe.flags.dont_update = true;\n              cur_frm.cscript.get_fabric_qty(frm.doc, cdt, cdn)\n            } else {\n              cur_frm.cscript.calculate_total_amt(frm, cdt, cdn)\n            }\n          }\n        }\n      });\n    }\n});\n\nfrappe.ui.form.on('Sales Order Item', 'size', function(frm, cdt, cdn){\n  cur_frm.cscript.get_fabric_qty(frm.doc, cdt, cdn); \n})\n\n\ncur_frm.cscript.get_fabric_qty = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn];\n  if(d.size && d.width)\n    frappe.call({\n        method: 'tailorpad.custom_folder.custom_selling.get_fabric_qty',\n        args: {'parent': d.item_code, 'size': d.size, 'width': d.width},\n        freeze: true,\n        callback: function(r){\n            if(r.message){\n              frappe.model.set_value('Quotation Item', d.name, 'fabric_qty', r.message)\n              cur_frm.cscript.calculate_total_amt(cur_frm, cdt, cdn)\n            }\n        }\n    });\n}\n\ncur_frm.cscript.fabric_qty = function(doc, cdt, cdn){\n\tcur_frm.cscript.fabric_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.qty = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  cur_frm.cscript.service_rate(doc, cdt, cdn);\n\tfabric_qty = d.fabric_qty || 1.0;\n\tfrappe.model.set_value(cdt, cdn, 'fabric_qty', flt(fabric_qty * d.qty))\n\tcur_frm.cscript.fabric_rate(doc, cdt, cdn)\n}\n\n\ncur_frm.cscript.service_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'total_service_rate', flt(d.qty) * flt(d.service_rate) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.fabric_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n\tconsole.log(d.fabric_qty)\n  frappe.model.set_value(cdt, cdn, 'total_fabric_price', flt(d.fabric_qty) * flt(d.fabric_rate) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.total_service_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'service_rate', (flt(d.total_service_rate) / flt(d.qty)) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.total_fabric_price = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'fabric_rate', (flt(d.total_fabric_price) / flt(d.fabric_qty)) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\n\ncur_frm.cscript.calculate_price_list_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  rate = (flt(d.total_service_rate) + flt(d.total_fabric_price)) / flt(d.qty)\n  frappe.model.set_value(cdt, cdn, 'price_list_rate', rate)\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 0,
  "modified": "2022-02-20 19:04:43.295123",
  "name": "User-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('User', 'refresh', function(frm, cdt, cdn){\n  module_list = ['Core', 'All Applications', 'Website', 'Tailorpad']\n  $.each(module_list, function(i, val){\n    $(repl('[data-module=\"%(module_name)s\"]', {module_name: val})).parent().parent().parent().css(\"display\", \"none\")\n  })\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2022-02-20 19:04:35.806955",
  "name": "Purchase Order-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Purchase Order\", {\n  refresh: function(frm){\n      console.log(\"called\")\n    if(frm.doc.docstatus==1){\n      frm.add_custom_button(__(\"Send PO to supplier\"),\n        function(){\n          frappe.confirm(__(\"Are you sure want to send email to supplier?\"),\n  \t\t\t\t\tfunction() {\n  \t\t\t\t\t\tfrm.trigger(\"send_po_to_supplier\")\n  \t\t\t\t\t}\n  \t\t\t\t);\n        })\n    }\n  },\n\n  send_po_to_supplier: function(frm){\n    if(frm.doc.email_id && frm.doc.message_for_supplier){\n      frappe.call({\n        method: \"tailorpad.custom_folder.custom_buying.send_email_to_supplier\",\n        freeze: true,\n        args: {supplier:frm.doc.supplier, email_id: frm.doc.email_id, po_no: frm.doc.name, so_no: frm.doc.sales_order, message: frm.doc.message_for_supplier},\n        callback: function(r){\n          if(r.message){\n            alert(\"Email sent successfuly\")\n          }\n        }\n      })\n    }else{\n      frappe.throw(\"Mandatory fields: Email id, Message for Supplier\")\n    }\n  },\n\n  supplier: function(frm){\n      if(frm.doc.supplier){\n        frm.trigger(\"get_supplier_email_id\")\n      }\n  },\n\n  get_supplier_email_id: function(frm){\n    frappe.call({\n      method: \"tailorpad.custom_folder.custom_buying.get_supplier_email_id\",\n      args: {supplier: frm.doc.supplier},\n      callback: function(r){\n        if(r.message){\n          frm.set_value('email_id', r.message)\n        }\n      }\n    })\n  },\n\n  on_submit: function(frm){\n    frappe.boot.notification_settings.purchase_order = 0;\n  }\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Order",
  "enabled": 0,
  "modified": "2022-02-20 19:04:28.549435",
  "name": "Production Order-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "erpnext.production_order = {\n\tset_custom_buttons: function(frm) {\n\t\tvar doc = frm.doc;\n\t\tif (doc.docstatus === 1) {\n\n\t\t\tif (flt(doc.qty) > flt(doc.material_transferred_for_manufacturing)) {\n\t\t\t\tfrm.add_custom_button(__('Start'),\n\t\t\t\t\tcur_frm.cscript['Start Manufacturing']);\n\t\t\t}\n\n\t\t\tif(frm.doc.operations) {\n\t\t\t\tshow_button = false\n\t\t\t\tfrm.doc.operations.forEach((data) => {\n\t\t\t\t\tif(data.is_subcontracted) {\n\t\t\t\t\t\tshow_button= true\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tif(show_button) {\n\t\t\t\t\tfrm.add_custom_button(__('Subcontract'), cur_frm.cscript['Subcontract']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\tfrm.add_custom_button(__('Issue Raw Material'), function(){\n\t\t\t\terpnext.production_order.issue_raw_material(frm.doc);\t\n\t\t\t});\n\t\t\t\n\n\t\t\tif (doc.status != 'Stopped' && doc.status != 'Completed') {\n\t\t\t\tfrm.add_custom_button(__('Stop'), cur_frm.cscript['Stop Production Order'],\n\t\t\t\t\t\"icon-exclamation\", \"btn-default\");\n\t\t\t} else if (doc.status == 'Stopped') {\n\t\t\t\tfrm.add_custom_button(__('Re-open'), cur_frm.cscript['Unstop Production Order'],\n\t\t\t\t\"icon-check\", \"btn-default\");\n\t\t\t}\n\t\t}\n\n\t},\n\tissue_raw_material: function(doc) {\n\t\tfrappe.call({\n\t\t\tmethod: \"tailorpad.custom_folder.custom_manufacturing.get_users_wo_operation_data\",\n\t\t\tfreeze: true,\n\t\t\targs: {\n\t\t\t\t'production_order': cur_frm.doc.name,\n\t\t\t\t'item_code': cur_frm.doc.production_item\n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tvar dialog = new frappe.ui.Dialog({\n\t\t\t\ttitle: __(\"For Operation\"),\n\t\t\t\tfields: [\n\t\t\t\t\t{\"fieldtype\": \"Link\", \"label\": __(\"Operation\"), \"fieldname\": \"operation\", \"options\":\"Operation\",\n\t\t\t\t\t\t\"get_query\": function () {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\t\t['Operation', 'name', 'in', r.message]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} },\n\t\t\t\t\t\t{\"fieldtype\": \"Button\", \"label\": __(\"Issue Raw Material\"), \"fieldname\": \"issue_raw_material\", \"cssClass\": \"btn-primary\"},\n\t\t\t\t\t]\n\t\t\t\t});\n\n\t\t\t\tdialog.fields_dict.issue_raw_material.$input.click(function() {\n\t\t\t\t\tvar args = dialog.get_values();\n\t\t\t\t\tif(!args) return;\n\t\t\t\t\tdialog.hide();\n\t\t\t\t\treturn frappe.call({\n\t\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\t\tmethod: \"tailorpad.custom_folder.custom_manufacturing.issue_raw_material\",\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\"work_order\": me.frm.doc.work_order,\n\t\t\t\t\t\t\t\"operation\": args.operation\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfreeze: true,\n\t\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\t\t\tvar doc = frappe.model.sync(r.message);\n\t\t\t\t\t\t\t\tfrappe.set_route(\"Form\", r.message.doctype, r.message.name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tdialog.show();\n\t\t}\n\t})\n\t\t\n\t},\n\tcalculate_cost: function(doc) {\n\t\tif (doc.operations){\n\t\t\tvar op = doc.operations;\n\t\t\tdoc.planned_operating_cost = 0.0;\n\t\t\tfor(var i=0;i<op.length;i++) {\n\t\t\t\tplanned_operating_cost = flt(flt(op[i].hour_rate) * flt(op[i].time_in_mins) / 60, 2);\n\t\t\t\tfrappe.model.set_value('Production Order Operation',op[i].name, \"planned_operating_cost\", planned_operating_cost);\n\n\t\t\t\tdoc.planned_operating_cost += planned_operating_cost;\n\t\t\t}\n\t\t\trefresh_field('planned_operating_cost');\n\t\t}\n\t},\n\n\tcalculate_total_cost: function(frm) {\n\t\tvar variable_cost = frm.doc.actual_operating_cost ?\n\t\t\tflt(frm.doc.actual_operating_cost) : flt(frm.doc.planned_operating_cost)\n\t\tfrm.set_value(\"total_operating_cost\", (flt(frm.doc.additional_operating_cost) + variable_cost))\n\t},\n\n\tsetup_company_filter: function(frm) {\n\t\tvar company_filter = function(doc) {\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\t'company': frm.doc.company\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfrm.fields_dict.fg_warehouse.get_query = company_filter;\n\t\tfrm.fields_dict.wip_warehouse.get_query = company_filter;\n\t},\n\n\tsetup_bom_filter: function(frm) {\n\t\tfrm.set_query(\"bom_no\", function(doc) {\n\t\t\tif (doc.production_item) {\n\t\t\t\treturn{\n\t\t\t\t\tquery: \"erpnext.controllers.queries.bom\",\n\t\t\t\t\tfilters: {item: cstr(doc.production_item)}\n\t\t\t\t}\n\t\t\t} else msgprint(__(\"Please enter Production Item first\"));\n\t\t});\n\t},\n\n\tset_default_warehouse: function(frm) {\n\t\tfrappe.call({\n\t\t\tmethod: \"erpnext.manufacturing.doctype.production_order.production_order.get_default_warehouse\",\n\n\t\t\tcallback: function(r) {\n\t\t\t\tif(!r.exe) {\n\t\t\t\t\tfrm.set_value(\"wip_warehouse\", r.message.wip_warehouse);\n\t\t\t\t\tfrm.set_value(\"fg_warehouse\", r.message.fg_warehouse)\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n\ncur_frm.cscript['Subcontract'] = function() { \n\tvar doc = cur_frm.doc;\n\toperations = []\n\n\tcur_frm.doc.operations.forEach((data) => {\n\t\tif(data.is_subcontracted) {\n\t\t\toperations.push(data.operation)\n\t\t}\n\t})\n\n\t// if(operations.length === 1) {\n\t// \toperation = operations[0]\n\t// \tcur_frm.cscript.make_po_for_operation(operation);\n\t// } else {\n\t\tsub_dialog = new frappe.ui.Dialog({\n\t\twidth: 1200,\n\t\ttitle: __(\"Subcontracted Operations\"),\n\t\t\tfields: [\n\t\t\t\t{fieldtype: \"Select\", fieldname: \"operation\", label: __(\"Operation\"), reqd: 1, options: operations},\n\t\t\t\t{fieldtype: \"Link\", fieldname: \"supplier\", label: __(\"Supplier\"), reqd: 1, options: \"Supplier\"},\n\t\t\t]\n\t\t})\n\n\t\tsub_dialog.show()\n\t\tsub_dialog.set_primary_action(__(\"Make Purchase Prder\"), () => {\n\t\t\tvar dialog_data = sub_dialog.get_values();\n\t\t\tvar operation = dialog_data['operation'];\n\t\t\tvar supplier = dialog_data['supplier'];\n\t\t\tcur_frm.cscript.make_po_for_operation(operation, supplier)\n\t\t})\n\t// }\n}\n\ncur_frm.cscript.make_po_for_operation = function(operation, supplier) {\n\treturn frappe.call({\n\t\tmethod: \"tailorpad.custom_folder.custom_manufacturing.make_purchase_for_subcontract\",\n\t\targs: {\n\t\t\t'production_order': cur_frm.doc.name,\n\t\t\t'operation': operation,\n\t\t\t'company': cur_frm.doc.company,\n\t\t\t'supplier': supplier\n\t\t},\n\t\tcallback: function(r) {\n\t\t\tif(r.message){\n\t\t\t\tvar doc = frappe.model.sync(r.message);\n\t\t\t\tfrappe.set_route(\"Form\", r.message.doctype, r.message.name);\n\t\t\t}\n\t\t}\n\t})\n}\n\n\ncur_frm.cscript['Start Manufacturing'] = function() {\n\tfrappe.call({\n\t\tmethod: \"tailorpad.custom_folder.custom_manufacturing.get_manufacturing_process\",\n\t\tfreeze: true,\n\t\targs: {\n\t\t\t'production_order': cur_frm.doc.name,\n\t\t\t'work_order': cur_frm.doc.work_order,\n\t\t\t'item_code': cur_frm.doc.production_item\n\t\t},\n\t\tcallback: function(r) {\n\t\t\tif(r.message){\n\t\t\t\tmsg = r.message;\n\t\t\t\tif(msg.latest_operation) {\n\t\t\t\t\tcur_frm.cscript.make_manufacturing_modal(msg.operations, msg.operation_info, msg.latest_operation, msg);\n\t\t\t\t} else {\n\t\t\t\t\tfrappe.throw(\"Operations in this branch is completed or dependent operations are running\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\ncur_frm.cscript.make_manufacturing_modal = function(operations, args, latest_operation, obj) {\n\toperations_key = Object.keys(operations);\n\ttrial_qc_data = obj.opt_trial_qc\n\tdialog = new frappe.ui.Dialog({\n\t\twidth: 1200,\n\t\ttitle: __(\"Operation Allotment\"),\n\t\tfields: [\n\t\t\t{fieldtype: \"Select\", fieldname: \"operation\", label: __(\"Operation\"), reqd: 1, options: operations_key, default:latest_operation},\n\t\t\t{fieldtype: \"Data\", read_only:1, fieldname: \"trial_no\", label: __(\"Trial\"), default: trial_qc_data[latest_operation] && trial_qc_data[latest_operation]['trials'] ? 1:''},\n\t\t\t{fieldtype: \"Link\", fieldname: \"employee\", label: __(\"Employee\"), \n\t\t\t\toptions:\"Employee\",\n\t\t\t\tget_query: function() {\n\t\t\t\t\tvar dialog_data = dialog.get_values()\n\t\t\t\t\treturn {\n\t\t\t\t\t\tquery: \"tailorpad.custom_folder.custom_manufacturing.get_employees\",\n\t\t\t\t\t\tfilters: {\n\t\t\t\t\t\t\titem_code: cur_frm.doc.production_item,\n\t\t\t\t\t\t\toperation: dialog_data.operation\n\t\t\t\t\t\t}\n\t\t\t\t\t};\t\n\t\t\t\t},\n\t\t\t\tonchange:function(e) {\n\t\t\t\t\temployee = this.get_value();\n\t\t\t\t\thours = 0;\n\n\t\t\t\t\tif(obj.employees[employee][dialog_values.operation]) {\n\t\t\t\t\t\thours = obj.employees[employee][dialog_values.operation][\"operation_time\"]\n\t\t\t\t\t}\n\t\t\t\t\tif(hours) {\n\t\t\t\t\t\thours = flt(hours/60, 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tdialog.set_value(\"hours\", hours);\n\t\t\t\t\tdialog.set_value(\"completed_serial_no\", cur_frm.doc.serial_no);\n\n\t\t\t\t\tupdate_qty(cur_frm.doc.serial_no)\n\n\t\t\t\t\tupdate_hours()\n\t\t\t\t}\n\t\t\t},\n\t\t\t{fieldtype: \"Data\", fieldname: \"item_name\", label: __(\"Item Name\"), reqd: 1, default: cur_frm.doc.production_item},\n\t\t\t{fieldtype: \"Column Break\"},\n\t\t\t{fieldtype: \"Datetime\", fieldname: \"start_date\", label: __(\"Start Date\"), reqd: 1, default: frappe.datetime.now_datetime()},\n\t\t\t{fieldtype: \"Data\", read_only:1, fieldname: \"quality_check\", label: __(\"Quality Check\")},\n\t\t\t{fieldtype: \"Float\", fieldname: \"hours\", label: __(\"Hours\")},\n\t\t\t{fieldtype: \"Datetime\", fieldname: \"end_date\", label: __(\"End Date\"), reqd: 1, default: frappe.datetime.now_datetime()},\n\t\t\t{fieldtype: \"Section Break\"},\n\t\t\t{fieldtype: \"Select\", fieldname: \"serial_no\", label: __(\"Serial No\"), options:cur_frm.doc.serial_no.split('\\n')},\n\t\t\t{fieldtype: \"Check\", fieldname: \"select_all\", label: __(\"Select All\")},\n\t\t\t{fieldtype: \"Small Text\", fieldname: \"completed_serial_no\", label: __(\"Serial Nos\")},\n\t\t\t{fieldtype: \"Section Break\"},\n\t\t\t{fieldtype: \"Currency\", fieldname: \"piece_rate\", label: __(\"Piece Rate\")},\n\t\t\t{fieldtype: \"Currency\", fieldname: \"wages\", label: __(\"Wages\")},\n\t\t\t{fieldtype: \"Currency\", fieldname: \"extra_cost\", label: __(\"Extra Cost\")},\n\t\t\t{fieldtype: \"Column Break\"},\n\t\t\t{fieldtype: \"Currency\", fieldname: \"style_cost\", label: __(\"Style Cost\")},\n\t\t\t{fieldtype: \"Currency\", fieldname: \"total_style_cost\", label: __(\"Total Style Cost\")},\n\t\t\t{fieldtype: \"Currency\", fieldname: \"trial_cost\", label: __(\"Trial Cost\")},\n\t\t\t{fieldtype: \"Section Break\"},\n\t\t\t{fieldtype: \"Button\", fieldname: \"assign\", label: __(\"Assign\")},\n\t\t\t{fieldtype: \"Column Break\"},\n\t\t\t{fieldtype: \"Button\", fieldname: \"complete\", label: __(\"Complete\")},\n\t\t]\n\t})\n\n\tvar fd = dialog.fields_dict;\n\tvar dialog_values = dialog.get_values()\n\tdialog.show()\n\n\tif(args && args[dialog_values.operation]) {\n\t\tdialog.set_values(args[dialog_values.operation])\n\t}\n\n\tif(!dialog_values.quality_check && trial_qc_data) {\n\t\tqc = trial_qc_data[dialog_values.operation]['trials']\n\t\tqc_values = qc &&  qc[dialog_values.trial_no]? qc[dialog_values.trial_no]['quality_check'] : ''\n\t\tdialog.set_value('quality_check', qc_values == 'checked'?'Yes': 'No')\n\t}\n\n\tif(!dialog_values.hours && !args[dialog_values.operation]) {\n\t\tupdate_qty(dialog_values.completed_serial_no)\n\t}\n\n\t$(fd.serial_no.input).change(function() {\n\t\tval = fd.completed_serial_no.$input.val()\n\t\tif(val) {\n\t\t\tval += '\\n' + $(this).val()\n\t\t} else {\n\t\t\tval = $(this).val()\n\t\t}\n\n\t\tfd.completed_serial_no.$input.val(val)\n\t\tupdate_qty(val)\n\t})\n\n\t// $(fd.employee.input).change(function() {\n\t\t\n\t// \temployee = $(this).val();\n\t// \thours = 0;\n\n\t// \tif(obj.employees[employee][dialog_values.operation]) {\n\t// \t\thours = obj.employees[employee][dialog_values.operation][\"operation_time\"]\n\t// \t}\n\t// \tif(hours) {\n\t// \t\thours = flt(hours/60, 2);\n\t// \t}\n\n\t// \tfd.hours.$input.val(hours)\n\n\t// \tserial_no_val = cur_frm.doc.serial_no\n\t// \tfd.completed_serial_no.$input.val(serial_no_val)\n\t// \tupdate_qty(serial_no_val)\n\n\t// \tupdate_hours()\n\n\t// })\n\n\t$(fd.select_all.input).change(function() {\n\t\tval = \"\"\n\t\tif(this.checked) {\n\t\t\tval = cur_frm.doc.serial_no\n\t\t}\n\n\t\tfd.completed_serial_no.$input.val(val)\n\t\tupdate_qty(val)\n\t})\n\n\tfunction update_qty(val){\n\t\tvar dialog_values = dialog.get_values()\n\t\tserial_no = val ? val.split('\\n') : []\n\t\tsno_list = []\n\t\tfor(key in serial_no) {\n\t\t\tsno = serial_no[key]\n\t\t\tif(sno) {\n\t\t\t\tsno_list.push(sno)\n\t\t\t}\n\t\t}\n\n\t\tqty = sno_list.length || 0;\n\t\temployee_data = obj.employees[dialog_values.employee];\n\t\thours = employee_data ? employee_data[dialog_values.operation][\"operation_time\"] : 0.0;\n\t\tif(hours>0) {\n\t\t\thours = flt(hours/60, 2);\n\t\t}\n\t\ttotal_hrs = flt(qty * hours, 2)\n\t\tif(total_hrs == 0){ return;}\n\t\tfd.hours.$input.val(total_hrs)\n\t\tpiece_rate = employee_data ? employee_data[dialog_values.operation][\"wage\"] : 0.0;\n\t\tstyle_cost = obj.style_cost[dialog_values.operation] || 0.0\n\t\tif(trial_qc_data && dialog_values.trial_no) {\n\t\t\ttrial_cost = flt(trial_qc_data[dialog_values.operation]['trials'][dialog_values.trial_no][\"cost\"])\n\t\t\tfd.trial_cost.$input.val(trial_cost)\n\t\t}\n\n\t\tfd.piece_rate.$input.val(piece_rate)\n\t\tfd.wages.$input.val(qty * piece_rate)\n\t\tfd.style_cost.$input.val(style_cost)\n\t\tfd.total_style_cost.$input.val(qty * style_cost)\n\t\tupdate_hours()\n\t}\n\n\tfunction update_hours() {\n\t\tfrom_time = frappe.datetime.user_to_str(fd.start_date.$input.val());\n\t\tfrom_time = moment(from_time)\n\t\thours = flt(fd.hours.$input.val());\n\t\tfrom_time.add(hours, \"hours\");\n\t\tdialog.set_value('end_date', from_time.format(moment.defaultDatetimeFormat))\n\t}\n\n\t$(fd.hours.input).change(function() {\n\t\tupdate_hours()\n\t})\n\n\t$(fd.operation.input).change(function() {\n\t\tnow_time = moment();\n\t\thours = flt(operations[dialog_values.operation] / 60, 2) || 0.1;\n\t\tdialog.fields_dict.start_date.$input.val(now_time.format(moment.defaultDatetimeFormat))\n\t\tdialog.fields_dict.hours.$input.val(hours)\n\t\tnow_time.add(hours, \"hours\");\n\t\tdialog.set_value('end_date', now_time.format(moment.defaultDatetimeFormat))\n\t})\n\n\t$(fd.assign.input).click(function() {\n\t\tvar dialog_values = dialog.get_values();\n\t\tfrappe.call({\n\t\t\tmethod:\"tailorpad.custom_folder.custom_manufacturing.assign_serial_no_to_employee\",\n\t\t\targs:{\n\t\t\t\t\"args\": dialog_values,\n\t\t\t\t'production_order': cur_frm.doc.name,\n\t\t\t\t'item_code': cur_frm.doc.production_item,\n\t\t\t\t'work_order': cur_frm.doc.work_order\n\t\t\t},\n\t\t\tcallback: function() {\n\t\t\t\tfrappe.msgprint(__(\"Successfully Assigned\"));\n\t\t\t\tcur_frm.reload_doc()\n\t\t\t\tdialog.hide()\n\t\t\t}\n\t\t})\n\t})\n\n\t$(fd.complete.input).click(function() {\n\t\tvar dialog_values = dialog.get_values();\n\t\tfrappe.call({\n\t\t\tmethod:\"tailorpad.custom_folder.custom_manufacturing.complete_serial_no_to_employee\",\n\t\t\targs:{\n\t\t\t\t\"args\": dialog_values,\n\t\t\t\t'production_order': cur_frm.doc.name,\n\t\t\t\t'item_code': cur_frm.doc.production_item,\n\t\t\t\t'work_order': cur_frm.doc.work_order\n\t\t\t},\n\t\t\tcallback: function() {\n\t\t\t\tfrappe.msgprint(__(\"Successfully Completed\"));\n\t\t\t\tcur_frm.reload_doc()\n\t\t\t\tdialog.hide()\n\t\t\t}\n\t\t})\n\t})\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2022-02-20 19:03:58.071412",
  "name": "Sales Invoice-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "cur_frm.fields_dict['items'].grid.get_field(\"fabric_item_code\").get_query = function(doc, cdt, cdn) {\n\treturn {\n\t\tquery: \"tailorpad.custom_folder.custom_selling.get_fabric\"\n\t}\n}\n//\n// cur_frm.cscript.size = function(doc, cdt, cdn){ cur_frm.cscript.get_fabric_qty(doc, cdt, cdn); }\n//\n// cur_frm.cscript.get_fabric_qty = function(doc, cdt, cdn){\n//   var d = locals[cdt][cdn]\n//   if(d.size && d.width)\n//     frappe.call({\n//         method: 'tailorpad.custom_folder.custom_selling.get_fabric_qty',\n//         args: {'parent': d.item_code, 'size': d.size, 'width': d.width},\n//         freeze: true,\n//         callback: function(r){\n//             if(r.message){\n//               frappe.model.set_value('Sales Invoice Item', d.name, 'fabric_qty', r.message.fabric_qty)\n//             }\n//         }\n//     })\n// }\n\nfrappe.ui.form.on('Sales Invoice Item', 'item_code', function(frm, cdt, cdn){\n    var d = locals[cdt][cdn];\n    if(d.item_code) {\n     // cur_frm.cscript.calculate_total_amt(frm, cdt, cdn)\n    }\n});\n/*\ncur_frm.cscript.calculate_total_amt = function(frm, cdt, cdn){\n  var doc = frm.doc;\n  var d = locals[cdt][cdn]\n  frappe.call({\n    method: \"tailorpad.custom_folder.custom_item_details.calculate_total_amt\",\n    args:{\n      args: {\n        item_code: d.item_code,\n        customer: frm.doc.customer,\n        qty: d.qty,\n        fabric_item_code: d.fabric_item_code,\n        fabric_qty: d.fabric_qty,\n        item_rate: d.price_list_rate,\n        service_rate: d.service_rate,\n        total_service_rate: d.total_service_rate,\n        fabric_rate: d.fabric_rate,\n        size: d.size,\n        width: d.width,\n        total_fabric_price: d.total_fabric_price,\n        rate: 0.0,\n        amount: 0.0,\n        parenttype: doc.doctype,\n        parent: doc.name,\n        doctype: cdt,\n        name: cdn,\n        currency: doc.currency,\n        conversion_rate: doc.conversion_rate,\n        price_list: doc.selling_price_list ||\n           doc.buying_price_list,\n        price_list_currency: doc.price_list_currency,\n        plc_conversion_rate: doc.plc_conversion_rate,\n        company: doc.company,\n        order_type: doc.order_type,\n        is_pos: cint(doc.is_pos),\n        is_subcontracted: doc.is_subcontracted,\n        transaction_date: doc.transaction_date || doc.posting_date,\n        ignore_pricing_rule: doc.ignore_pricing_rule\n      }\n    },\n    callback: function(r){\n      $.each(r.message, function(key, val){\n        if(key!= 'item_code') {\n          frappe.model.set_value(cdt, cdn, key, val)\n        }\n      })      \n    }\n  })\n}\n*/\n\ncur_frm.cscript.get_item_details = function(frm, cdt, cdn) {\n  var item = locals[cdt][cdn];\n  var update_stock = 0;\n  if(['Sales Invoice', 'Purchase Invoice'].includes(frm.doc.doctype)) {\n      update_stock = cint(me.frm.doc.update_stock);\n      show_batch_dialog = update_stock;\n\n  }\n  return this.frm.call({\n          method: \"erpnext.stock.get_item_details.get_item_details\",\n          child: item,\n          args: {\n            args: {\n              item_code: item.item_code,\n              barcode: item.barcode,\n              serial_no: item.serial_no,\n              warehouse: item.warehouse,\n              customer: frm.doc.customer,\n              supplier: frm.doc.supplier,\n              currency: frm.doc.currency,\n              update_stock: update_stock,\n              conversion_rate: frm.doc.conversion_rate,\n              price_list: frm.doc.selling_price_list || frm.doc.buying_price_list,\n              price_list_currency: frm.doc.price_list_currency,\n              plc_conversion_rate: frm.doc.plc_conversion_rate,\n              company: frm.doc.company,\n              total_fabric_price: item.total_fabric_price,\n              total_service_rate: item.total_service_rate,\n              order_type: frm.doc.order_type,\n              is_pos: cint(frm.doc.is_pos),\n              is_subcontracted: frm.doc.is_subcontracted,\n              transaction_date: frm.doc.transaction_date || frm.doc.posting_date,\n              ignore_pricing_rule: frm.doc.ignore_pricing_rule,\n              doctype: frm.doc.doctype,\n              name: frm.doc.name,\n              project: item.project || frm.doc.project,\n              qty: item.qty || 1,\n              stock_qty: item.stock_qty,\n              conversion_factor: item.conversion_factor\n            }\n          },\n\n          callback: function(r) {\n            \n            if(!r.exc) {\n              var d = locals[cdt][cdn];\n              $.each(r.message, function(k, v) {\n                if(!d[k]) d[k] = v;\n              });\n              frm.script_manager.trigger(\"price_list_rate\", cdt, cdn);\n            }\n\n            refresh_field('items')\n          }\n        });\n}\n\nfrappe.ui.form.on('Sales Order Item', 'fabric_item_code', function(frm, cdt, cdn){\n  var d = locals[cdt][cdn];\n  if(d.fabric_item_code) {\n      frappe.call({\n        method : \"tailorpad.custom_folder.custom_selling.get_supplier\",\n        args : {'item_code': d.fabric_item_code},\n        freeze: true,\n        callback: function(r){\n          if(r.message){\n            frappe.model.set_value('Sales Order Item', d.name, 'fabric_supplier', r.message.default_supplier);\n            frappe.model.set_value('Sales Order Item', d.name, 'fabric_warehouse', r.message.default_warehouse);\n            d.fabric_qty = 0.0\n            if(d.size) {\n              frappe.flags.dont_update = true;\n              cur_frm.cscript.get_fabric_qty(frm.doc, cdt, cdn)\n            } else {\n             // cur_frm.cscript.calculate_total_amt(frm, cdt, cdn)\n            }\n          }\n        }\n      });\n    }\n});\n\nfrappe.ui.form.on('Sales Order Item', 'size', function(frm, cdt, cdn){\n  cur_frm.cscript.get_fabric_qty(frm.doc, cdt, cdn); \n})\n\ncur_frm.cscript.get_fabric_qty = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn];\n  if(d.size && d.width)\n    frappe.call({\n        method: 'tailorpad.custom_folder.custom_selling.get_fabric_qty',\n        args: {'parent': d.item_code, 'size': d.size, 'width': d.width},\n        freeze: true,\n        callback: function(r){\n            if(r.message){\n              frappe.model.set_value('Sales Invoice Item', d.name, 'fabric_qty', r.message)\n              //cur_frm.cscript.calculate_total_amt(cur_frm, cdt, cdn)\n            }\n        }\n    });\n}\n\ncur_frm.cscript.fabric_qty = function(doc, cdt, cdn){\n\tcur_frm.cscript.fabric_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.qty = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  cur_frm.cscript.service_rate(doc, cdt, cdn);\n\tfabric_qty = d.fabric_qty || 1.0;\n\tfrappe.model.set_value(cdt, cdn, 'fabric_qty', flt(fabric_qty * d.qty))\n\tcur_frm.cscript.fabric_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.service_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'total_service_rate', flt(d.qty) * flt(d.service_rate) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.fabric_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'total_fabric_price', flt(d.fabric_qty) * flt(d.fabric_rate) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.total_service_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'service_rate', (flt(d.total_service_rate) / flt(d.qty)) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.total_fabric_price = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'fabric_rate', (flt(d.total_fabric_price) / flt(d.fabric_qty)) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\n\ncur_frm.cscript.calculate_price_list_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  rate = (flt(d.total_service_rate) + flt(d.total_fabric_price)) / flt(d.qty)\n  frappe.model.set_value(cdt, cdn, 'price_list_rate', rate)\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2022-02-20 19:03:41.340976",
  "name": "Sales Order-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Order', 'refresh', function(frm, cdt, cdn){\n    for (var i=0;i<cur_frm.doc.items.length;i++){\n        if(!cur_frm.doc.items[i].fabric_code){\n          cur_frm.doc.items[i].fabric_code = '';\n        }\n    }\n   var today = new Date();\n   var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n   var date = (frappe.datetime.nowdate())\n   var dateTime = date+' '+time;\n   frappe.db.get_value('Selling Settings', {name: \"Selling Settings\"}, 'delivery_days' , (r) =>{\n       var d = frappe.datetime.add_days(dateTime,r.delivery_days)\n       var c = d + '' + time;\n       console.log(d);\n       if(!doc.delivery){\n          frm.set_value('delivery', c);\n          frm.set_value('delivery_date',frm.doc.delivery);\n  }\n})\n  var doc = frm.doc;\n  if(frm.is_new()) {\n    frm.doc.items = [];\n  }\n\n  frm.add_fetch('item_code', 'default_warehouse', 'warehouse');\n  frm.add_fetch('item_code', 'default_supplier', 'manufacturer_name');\n  \n\n  if(doc.docstatus==1){\n   // cur_frm.add_custom_button(\"Work Order\", cur_frm.cscript.show_work_order);\n    cur_frm.add_custom_button(\"Serial No\", function(){\n      frappe.route_options = {\n        \"sales_order\": frm.doc.name\n      };\n      frappe.set_route(\"List\", 'Serial No');\n    });\n  }\n})\n\n\nfrappe.ui.form.on('Sales Order', {\n  trial_date: function(frm) {\n    $.each(frm.doc.items || [], function(i, d) {\n      if(!d.trial_date) d.trial_date = frm.doc.trial_date;\n    });\n    refresh_field(\"items\");\n    if(frm.doc.trial_date){\n        if (frm.doc.trial_date > frm.doc.delivery){\n            frm.doc.trial_date ='';\n            frm.refresh_fields();\n            frappe.msgprint(\"Warning: Fitting Date cannot be more than delivery date\");\n        }\n    }\n  },\n  delivery: function(frm){\n    frm.set_value('delivery_date',frm.doc.delivery);\n\n  }\n})\n\n\ncur_frm.cscript.make_purchase_order = function(doc, cdt, cdn){\n  var doc = cur_frm.doc;\n  frappe.call({\n    method: \"tailorpad.custom_folder.custom_selling.get_data\",\n    args: {'name': doc.name, 'table': 'Purchase Order', 'fields':['name', 'status', 'supplier']},\n    freeze: true,\n    callback: function(r){\n      if(r.message){\n                 // new showdata_in_dialog_box('Purchase Order', r.message)\n      }\n    }\n  })\n}\n\n\nfrappe.ui.form.on('Sales Order Item',{\n  item_code: function(frm,cdt,cdn) {\n  var d = locals[cdt][cdn];\n  if(d.item_code) {\n   // cur_frm.cscript.calculate_total_amt(frm, cdt, cdn);\n  }\n  }\n /* raw_material_code: function(frm) {\n    if (frm.doc.raw_material_code) {\n        var allowed_raw_materials = frm.doc.allowed_raw_materials \n          ? frm.doc.allowed_raw_materials + '\\n' + frm.doc.raw_material_code : frm.doc.raw_material_code;\n\n        frm.set_value('allowed_raw_materials', allowed_raw_materials);\n        frm.set_value('raw_material_code', '');\n      }\n  }*/\n});\n\ncur_frm.cscript.calculate_total_amt = function(frm, cdt, cdn){\n  var doc = frm.doc;\n  var d = locals[cdt][cdn]\n  frappe.call({\n    method: \"tailorpad.custom_folder.custom_item_details.calculate_total_amt\",\n    args:{\n      args: {\n        item_code: d.item_code,\n        customer: frm.doc.customer,\n        qty: d.qty,\n        fabric_item_code: d.fabric_item_code,\n        fabric_qty: d.fabric_qty,\n        item_rate: d.price_list_rate,\n        service_rate: d.service_rate,\n        total_service_rate: d.total_service_rate,\n        fabric_rate: d.fabric_rate,\n        size: d.size,\n        width: d.width,\n        total_fabric_price: d.total_fabric_price,\n        rate: 0.0,\n        amount: 0.0,\n        parenttype: doc.doctype,\n        parent: doc.name,\n        doctype: cdt,\n        name: cdn,\n        currency: doc.currency,\n        conversion_rate: doc.conversion_rate,\n        price_list: doc.selling_price_list ||\n           doc.buying_price_list,\n        price_list_currency: doc.price_list_currency,\n        plc_conversion_rate: doc.plc_conversion_rate,\n        company: doc.company,\n        order_type: doc.order_type,\n        is_pos: cint(doc.is_pos),\n        is_subcontracted: doc.is_subcontracted,\n        transaction_date: doc.transaction_date || doc.posting_date,\n        ignore_pricing_rule: doc.ignore_pricing_rule\n      }\n    },\n    callback: function(r){\n      $.each(r.message, function(key, val){\n        if(key!= 'item_code') {\n          frappe.model.set_value(cdt, cdn, key, val)\n        }\n      })\n      cur_frm.cscript.get_item_details(frm, cdt, cdn)\n    }\n  })\n}\n\ncur_frm.cscript.get_item_details = function(frm, cdt, cdn) {\n  var item = locals[cdt][cdn];\n  var update_stock = 0;\n  if(['Sales Invoice', 'Purchase Invoice'].includes(frm.doc.doctype)) {\n      update_stock = cint(me.frm.doc.update_stock);\n      show_batch_dialog = update_stock;\n\n  }\n  return this.frm.call({\n          method: \"erpnext.stock.get_item_details.get_item_details\",\n          child: item,\n          args: {\n            args: {\n              item_code: item.item_code,\n              barcode: item.barcode,\n              serial_no: item.serial_no,\n              warehouse: item.warehouse,\n              customer: frm.doc.customer,\n              supplier: frm.doc.supplier,\n              currency: frm.doc.currency,\n              update_stock: update_stock,\n              conversion_rate: frm.doc.conversion_rate,\n              price_list: frm.doc.selling_price_list || frm.doc.buying_price_list,\n              price_list_currency: frm.doc.price_list_currency,\n              plc_conversion_rate: frm.doc.plc_conversion_rate,\n              company: frm.doc.company,\n              order_type: frm.doc.order_type,\n              total_fabric_price: item.total_fabric_price,\n              total_service_rate: item.total_service_rate,\n              is_pos: cint(frm.doc.is_pos),\n              is_subcontracted: frm.doc.is_subcontracted,\n              transaction_date: frm.doc.transaction_date || frm.doc.posting_date,\n              ignore_pricing_rule: frm.doc.ignore_pricing_rule,\n              doctype: frm.doc.doctype,\n              name: frm.doc.name,\n              project: item.project || frm.doc.project,\n              qty: item.qty || 1,\n              stock_qty: item.stock_qty,\n              conversion_factor: item.conversion_factor\n            }\n          },\n\n          callback: function(r) {          \n            if(!r.exc) {\n              var d = locals[cdt][cdn];\n              $.each(r.message, function(k, v) {\n                if(!d[k]) d[k] = v;\n              });\n\n              frm.script_manager.trigger(\"price_list_rate\", cdt, cdn);\n              if(d.item_group == 'Bespoke') {\n                frappe.model.set_value(d.doctype, d.name, 'order_type', 'New Order')\n              } else if(d.item_group == 'Products') {\n                frappe.model.set_value(d.doctype, d.name, 'order_type', 'RTB')\n              } else if(d.item_group == 'Services') {\n                frappe.model.set_value(d.doctype, d.name, 'order_type', 'Alteration')\n              } else {\n                frappe.model.set_value(d.doctype, d.name, 'order_type', '')\n              }\n            }\n\n            refresh_field('items')\n          }\n        });\n}\n\n\n\nfrappe.ui.form.on('Sales Order Item', 'fabric_item_code', function(frm, cdt, cdn){\n  var d = locals[cdt][cdn];\n  if(d.fabric_item_code) {\n      frappe.call({\n        method : \"tailorpad.custom_folder.custom_selling.get_supplier\",\n        args : {'item_code': d.fabric_item_code},\n        freeze: true,\n        callback: function(r){\n          if(r.message){\n            frappe.model.set_value('Sales Order Item', d.name, 'fabric_supplier', r.message.default_supplier);\n            frappe.model.set_value('Sales Order Item', d.name, 'fabric_warehouse', r.message.default_warehouse);\n            d.fabric_qty = 0.0\n            if(d.size) {\n              frappe.flags.dont_update = true;\n              cur_frm.cscript.get_fabric_qty(frm.doc, cdt, cdn)\n            } else {\n              //cur_frm.cscript.calculate_total_amt(frm, cdt, cdn)\n            }\n          }\n        }\n      });\n    }\n});\n\ncur_frm.fields_dict['items'].grid.get_field(\"fabric_item_code\").get_query = function(doc, cdt, cdn) {\n  var child = locals[cdt][cdn];\n\treturn {\n\t\tquery: \"tailorpad.custom_folder.custom_selling.get_fabric\",\n    filters: {\n      item_code: child.item_code\n    }\n\t}\n}\ncur_frm.fields_dict['items'].grid.get_field(\"alteration_operation\").get_query = function(doc, cdt, cdn) {\n  return {\n    filters: {\n      \"is_alteration_operation\": 1\n    }\n  }\n}\n\ncur_frm.fields_dict['items'].grid.get_field(\"raw_material_code\").get_query = function(doc, cdt, cdn) {\n      var child = locals[cdt][cdn];\n  return {\n    //\"filters\": [\n     // ['Item', 'item_group', 'not in', 'Bespoke, Products, Services'],\n   // ]\n    query: \"tailorpad.custom_folder.custom_stock.get_rawitem\",\n    filters: {\n        'item': child.item_code,\n\n    }\n  }\n}\n\ncur_frm.fields_dict['items'].grid.get_field(\"select_serial_no\").get_query = function(doc, cdt, cdn) {\n  var child = locals[cdt][cdn];\n\n  return {\n    query: \"tailorpad.custom_folder.custom_selling.get_completed_serialno\"\n  }\n}\n\nfrappe.ui.form.on('Sales Order Item', 'size', function(frm, cdt, cdn){\n  cur_frm.cscript.get_fabric_qty(frm.doc, cdt, cdn); \n})\n\ncur_frm.cscript.get_fabric_qty = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn];\n  if(d.size && d.width)\n    frappe.call({\n        method: 'tailorpad.custom_folder.custom_selling.get_fabric_qty',\n        args: {'parent': d.item_code, 'size': d.size, 'width': d.width},\n        freeze: true,\n        callback: function(r){\n            if(r.message){\n              var d = locals[cdt][cdn];\n              d.fabric_qty = r.message;\n            }\n            cur_frm.cscript.calculate_total_amt(cur_frm, cdt, cdn)\n        }\n    });\n}\n\ncur_frm.cscript.advance_payment_amount = function(doc, cdt, cdn){\n  if(flt(doc.advance_payment_amount) > flt(doc.rounded_total)){\n    frappe.set_value('advance_payment_amount', 0.0)\n    alert(\"Advance payment must be less than sales order amount\")\n  }else if(doc.status == 'Draft'){\n    cur_frm.set_value('outstanding_value', flt(doc.rounded_total) - flt(doc.advance_payment_amount))\n    // cur_frm.set_value('advance_paid', flt(doc.advance_payment_amount))\n  }\n}\n\ncur_frm.cscript.fabric_qty = function(doc, cdt, cdn){\n\tcur_frm.cscript.fabric_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.qty = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  cur_frm.cscript.service_rate(doc, cdt, cdn);\n\tvar fabric_qty = d.fabric_qty || 1.0;\n\tfrappe.model.set_value(cdt, cdn, 'fabric_qty', flt(fabric_qty * d.qty))\n\tcur_frm.cscript.fabric_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.service_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'total_service_rate', flt(d.qty) * flt(d.service_rate) * doc.conversion_rate)\n   cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.fabric_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'total_fabric_price', flt(d.fabric_qty) * flt(d.fabric_rate) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.total_service_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'service_rate', (flt(d.total_service_rate) / flt(d.qty)) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\ncur_frm.cscript.total_fabric_price = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  frappe.model.set_value(cdt, cdn, 'fabric_rate', (flt(d.total_fabric_price) / flt(d.fabric_qty)) * doc.conversion_rate)\n  cur_frm.cscript.calculate_price_list_rate(doc, cdt, cdn)\n}\n\n\ncur_frm.cscript.calculate_price_list_rate = function(doc, cdt, cdn){\n  var d = locals[cdt][cdn]\n  var rate = (flt(d.total_service_rate) + flt(d.total_fabric_price)) / flt(d.qty)\n  frappe.model.set_value(cdt, cdn, 'price_list_rate', rate)\n}\n\ncur_frm.cscript.on_submit = function(doc, cdt, cdn) {\n\tif(cint(frappe.boot.notification_settings.sales_order)) {\n\t\tcur_frm.email_doc(frappe.boot.notification_settings.sales_order_message);\n\t}\n  setTimeout(function(){cur_frm.reload_doc()}, 3000)\n};\n\nfrappe.ui.form.on('Sales Order Item', {\n  items_add: function(frm, cdt , cdn) {\n    var child = locals[cdt][cdn];\n    frappe.model.set_value(cdt, cdn, 'trial_date', frm.doc.trial_date)\n    frappe.model.set_value(cdt, cdn, 'delivery_date', frm.doc.delivery_date)\n  },\n\n  select_serial_no: function(frm, cdt, cdn) {\n    var child = locals[cdt][cdn];\n\n    if(child.select_serial_no) {\n        if(child.serial_no) {\n          sn = child.serial_no + '\\n' + child.select_serial_no;\n          frappe.model.set_value(cdt, cdn, 'serial_no', sn)\n        } else {\n          frappe.model.set_value(cdt, cdn, 'serial_no', child.select_serial_no)\n        }\n    }\n  }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2022-02-20 19:04:05.894197",
  "name": "Stock Entry-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Stock Entry', {\n\tmaterial_purpose: function(frm) {\n\t\tfrm.trigger(\"set_purpose\")\n\t\tvar doc = frm.doc;\n\n\t\tfrm.fields_dict[\"items\"].grid.set_column_disp(\"source_warehouse\", doc.material_purpose!='Material Receipt');\n\t\tfrm.fields_dict[\"items\"].grid.set_column_disp(\"target_warehouse\", doc.material_purpose!='Material Issue');\n\t},\n\tset_purpose: function(frm) {\n\t\tif(frm.doc.material_purpose == 'Material In') {\n\t\t\tfrm.set_value('purpose', 'Material Receipt')\n\t\t} else if(frm.doc.material_purpose == 'Material Out') {\n\t\t\tfrm.set_value('purpose', 'Material Issue')\n\t\t} else {\n\t\t\tfrm.set_value('purpose', frm.doc.material_purpose)\n\t\t}\n\t},\n\n\tsetup: function(frm) {\n\t\tvar doc = frm.doc;\n\n\t\tfrm.fields_dict[\"items\"].grid.set_column_disp(\"source_warehouse\", doc.material_purpose!='Material Receipt');\n\t\tfrm.fields_dict[\"items\"].grid.set_column_disp(\"target_warehouse\", doc.material_purpose!='Material Issue');\n\t},\n\n\trefresh: function(frm) {\n\t\tfrm.fields_dict.items.grid.refresh();\n\t},\n\n\titems_add: function(frappe, cdt, cdn) {\n\t\tvar doc = frm.doc;\n\t\tvar row = frappe.get_doc(cdt, cdn);\n\n\t\tif(!row.source_warehouse) row.source_warehouse = frm.doc.from_warehouse;\n\t\tif(!row.target_warehouse) row.target_warehouse = frm.doc.to_warehouse;\n\t\trefresh_field('items')\n\t}\n})\n\nfrappe.ui.form.on('Stock Entry Detail', {\n\tsource_warehouse: function(frm, cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\tfrappe.model.set_value(cdt, cdn, 's_warehouse', child.source_warehouse)\n\t},\n\n\ttarget_warehouse: function(frm, cdt, cdn) {\n\t\tvar child = locals[cdt][cdn];\n\t\tfrappe.model.set_value(cdt, cdn, 't_warehouse', child.target_warehouse)\n\t}\n})",
  "view": "Form"
 }
]